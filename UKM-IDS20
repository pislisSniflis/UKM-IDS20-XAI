{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11068880,"sourceType":"datasetVersion","datasetId":6897549},{"sourceId":11069096,"sourceType":"datasetVersion","datasetId":6897713}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, cross_validate, StratifiedKFold\nfrom sklearn.metrics import precision_recall_curve, precision_score, recall_score, f1_score, accuracy_score\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score, confusion_matrix, classification_report\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import datasets, ensemble, model_selection\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:15:39.312379Z","iopub.execute_input":"2025-03-18T17:15:39.312770Z","iopub.status.idle":"2025-03-18T17:15:39.320474Z","shell.execute_reply.started":"2025-03-18T17:15:39.312736Z","shell.execute_reply":"2025-03-18T17:15:39.319042Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# Load the data\ninitial_data = pd.read_csv('/kaggle/input/ukm-ids20-tajul/UKM-IDS20_Training set.csv')\n\n# Display basic information\ninitial_data.head(n=5)\ninitial_data.info()\ninitial_data.isnull().sum()\n\n# Drop rows with missing values\ndata_to_use = initial_data.dropna()\n\n# Check the shape of the cleaned data\nprint(data_to_use.shape)\n\n# Separate features and target variables\nX = data_to_use.drop(columns=['Class name', 'Class binary'], axis=1)\ny1 = data_to_use['Class name'].values\ny2 = data_to_use['Class binary'].values\n\n# Define a function to calculate the data ratio\ndef data_ratio(y2):\n    unique, count = np.unique(y2, return_counts=True)\n    ratio = round(count[0] / count[1], 1)\n    return f'{ratio}:1 ({count[0]}/{count[1]})'\n\n# Print the data ratio\nprint(data_ratio(y2))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:15:42.568732Z","iopub.execute_input":"2025-03-18T17:15:42.569068Z","iopub.status.idle":"2025-03-18T17:15:42.661949Z","shell.execute_reply.started":"2025-03-18T17:15:42.569041Z","shell.execute_reply":"2025-03-18T17:15:42.660738Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10308 entries, 0 to 10307\nData columns (total 48 columns):\n #   Column                 Non-Null Count  Dtype  \n---  ------                 --------------  -----  \n 0   dur                    10308 non-null  float64\n 1   trnspt                 10308 non-null  int64  \n 2   srvs                   10308 non-null  int64  \n 3   flag_n                 10308 non-null  int64  \n 4   flag_arst              10308 non-null  int64  \n 5   flag_uc                10308 non-null  int64  \n 6   flag_sign              10308 non-null  int64  \n 7   flag_synrst            10308 non-null  int64  \n 8   flag_a                 10308 non-null  int64  \n 9   flag_othr              10308 non-null  int64  \n 10  src_pkts               10308 non-null  int64  \n 11  dst_pkts               10308 non-null  float64\n 12  urg_bits               10308 non-null  int64  \n 13  push_pkts              10308 non-null  int64  \n 14  no_lnkd                10308 non-null  int64  \n 15  arp                    10308 non-null  int64  \n 16  src_ttl                10308 non-null  int64  \n 17  dst_ttl                10308 non-null  int64  \n 18  pkts_dirctn            10308 non-null  int64  \n 19  src_byts               10308 non-null  int64  \n 20  dst_byts               10308 non-null  float64\n 21  src_avg_byts           10308 non-null  float64\n 22  dst_avg_byts           10308 non-null  float64\n 23  strt_t                 10308 non-null  float64\n 24  end_t                  10308 non-null  float64\n 25  dst_host_count         10308 non-null  int64  \n 26  host_dst _count        10308 non-null  int64  \n 27  rtt_first_ack          10308 non-null  float64\n 28  rtt_avg                10308 non-null  float64\n 29  avg_t_sent             10308 non-null  float64\n 30  avg_t_got              10308 non-null  float64\n 31  repeated               10308 non-null  int64  \n 32  fst_src_sqc            10308 non-null  int64  \n 33  fst_dst_sqc            10308 non-null  int64  \n 34  src_re                 10308 non-null  int64  \n 35  dst_re                 10308 non-null  int64  \n 36  src_fast_re            10308 non-null  int64  \n 37  dst_fast_re            10308 non-null  int64  \n 38  ovrlp_count            10308 non-null  int64  \n 39  long_frag_count        10308 non-null  int64  \n 40  dns_ratio              10308 non-null  float64\n 41  avg_rr                 10308 non-null  float64\n 42  http_rqsts_count       10308 non-null  int64  \n 43  http_redirct_count     10308 non-null  int64  \n 44  http_clnt_error_count  10308 non-null  int64  \n 45  http_srv_error_count   10308 non-null  int64  \n 46  Class name             10308 non-null  object \n 47  Class binary           10308 non-null  int64  \ndtypes: float64(13), int64(34), object(1)\nmemory usage: 3.8+ MB\n(10308, 48)\n0.4:1 (3168/7140)\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"print('The class ratio for the original data:', data_ratio(y1))\nplt.figure(figsize=(13,5))\nsns.countplot(y=y1)\nplt.show()\nprint('The class ratio for the original data:', data_ratio(y2))\nsns.countplot(x=y2)\nplt.show()\ntest_data = pd.read_csv('/kaggle/input/ukm-ids20-testing-set-csv/UKM-IDS20_Testing set.csv')\nX_test= test_data.drop(columns=['Class', 'Binary'], axis=1)\ny1_test = test_data['Class'].values\ny2_test = test_data['Binary'].values\nX_train = X\ny1_train = y1\ny2_train = y2\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:15:47.719364Z","iopub.execute_input":"2025-03-18T17:15:47.719737Z","iopub.status.idle":"2025-03-18T17:15:48.121277Z","shell.execute_reply.started":"2025-03-18T17:15:47.719681Z","shell.execute_reply":"2025-03-18T17:15:48.119797Z"}},"outputs":[{"name":"stdout","text":"The class ratio for the original data: 1.2:1 (476/404)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1300x500 with 1 Axes>","image/png":"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9JDValVBQYEaNGigp5566pI1REVFFTletmyZJOno0aOqWLGiPVySLgRG3t7eSk5OLhIw+fj4qHnz5nr77bdVt25d1atXT/fcc499qdrRo0fVsmVLh9fUqlVLy5cvdzhXtWpV+789PDzk6empU6dOlfgM7u7u9nBJkvz9/XX69GlJUm5urk6dOuVQq9lsVmRkpKxWa4l9dunSRR07drQfX5yFBQAAAAAAbn63VMD0/fffq7CwUH369LGfs9lscnV11dNPP+3wTWkBAQEKCQlRSEiICgsLNXbsWL333ntydXW1twkNDdVrr70ms9msChUq/O0Suuuhb9++ateunbZt26b169fryy+/1Ouvv14kyLoUFxcXh2OTyXTJZYN/bS/pku0vh6urq8N7CwAAAAAAbh23zB5MhYWFWrt2rXr27Kl3333X/jNmzBj5+/vrp59+KvG1jRs3louLi1atWuVw3mKxKDg4WEFBQZcdLu3du9fheM+ePfZlbeHh4Tpx4oQyMjLs148ePaqcnByHpW9/FRERoS5duuitt95S5cqV7c8SHh6u3bt3O7TdtWvXJfsyysvLS+XLl9f+/fvt56xWqw4ePHjd7gkAAAAAAEq3WyZg+uWXX5STk6MWLVqoSpUqDj+NGjXSmjVrSnytyWRSu3bttGjRIp07d85QHbt27dKiRYuUkpKilStXasOGDWrXrp0kqW7duqpSpYomTJigAwcOaN++fZo4caJq166t6tWrF+krPT1dn3/+ufbs2aPjx49r+/btSktLswdInTp1UkJCgr755hulpqZq6dKl2rRpkzp16mToGf5Ou3bttHDhQm3evFkpKSmaPn26srOzWfYGAAAAAEAZdcsskfv+++9Vt25dh2VwFzVu3FiLFy/W4cOH5enpWezrmzVrpi+++EIrV65U586dr7qOTp06af/+/Zo3b548PT3Vs2dP+2baJpNJr776qj799FMNGzZMZrNZ0dHRJe7r5ObmpuTkZK1du1ZnzpyRv7+/2rRpo1atWkmSGjZsqF69emnJkiWaPn26goKC1Ldv3yL7TV1rnTt3VlZWliZOnCiz2axWrVopOjpaZvMtk1cCAAAAAIArYLIZ3VwHdv369VP79u3VoUMHZ5dyQ1mtVr300ku655571K1btyt67Qtr3tf+U8nXqbLSbWrDQc4uodQxmUwKCQlRamqq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\n"},"metadata":{}},{"name":"stdout","text":"The class ratio for the original data: 0.4:1 (3168/7140)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"numerical_cols = X_train.select_dtypes(include=['int64', 'float64']).columns\ncategorical_cols = X_train.select_dtypes(include=['object', 'bool']).columns\nnumerical_cols\ncategorical_cols\nt = [('ohe', OneHotEncoder(drop='first'), categorical_cols),('scale', StandardScaler(), numerical_cols)]\ncol_trans = ColumnTransformer(transformers=t)\ncol_trans.fit(X_train)\nX_train_transform = col_trans.transform(X_train)\nX_test_transform = col_trans.transform(X_test)\nX_train_transform.shape\nX_test_transform.shape\npd.unique(y1)\npd.unique(y2)\ntarget_trans = LabelEncoder()\ntarget_trans.fit(y1_train)\ny1_train_transform = target_trans.transform(y1_train)\ny1_test_transform = target_trans.transform(y1_test)\ny1_train_transform\ntarget_trans = LabelEncoder()\ntarget_trans.fit(y2_train)\ny2_train_transform = target_trans.transform(y2_train)\ny2_test_transform = target_trans.transform(y2_test)\ny2_train_transform\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:15:52.647458Z","iopub.execute_input":"2025-03-18T17:15:52.647829Z","iopub.status.idle":"2025-03-18T17:15:52.699963Z","shell.execute_reply.started":"2025-03-18T17:15:52.647800Z","shell.execute_reply":"2025-03-18T17:15:52.699012Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"array([1, 0, 1, ..., 1, 0, 0])"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"DTclf = tree.DecisionTreeClassifier()\nDTclf.fit(X_train_transform, y2_train_transform)\nfeature_names = np.array(numerical_cols)\nfeature_names\nimportances = DTclf.feature_importances_\nindices = np.argsort(importances)\nfeatures = np.array(numerical_cols)\nplt.title('Feature Importances of Decision Tree Classifier')\ncount = 10\nplt.barh(range(count), importances[indices][len(indices)-count:], color='g', align='center')\nplt.yticks(range(count), [features[i] for i in indices[len(indices)-count:]])\nplt.xlabel('Relative Importance')\nplt.show()\nDTclf.feature_importances_\nDTclf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=5)\nDTclf = DTclf.fit(X_train_transform, y2_train_transform)\ny_pred = DTclf.predict(X_test_transform)\nfrom sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y2_test_transform, y_pred))\nreport=metrics.classification_report(y2_test_transform,y_pred)\nDTclf_name=['Decision Tree Classifer','RegLog']\nprint('Reporting for %s:'%DTclf_name)\nprint(report)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:15:57.334512Z","iopub.execute_input":"2025-03-18T17:15:57.334877Z","iopub.status.idle":"2025-03-18T17:15:57.680454Z","shell.execute_reply.started":"2025-03-18T17:15:57.334847Z","shell.execute_reply":"2025-03-18T17:15:57.679193Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Accuracy: 0.9984490112446684\nReporting for ['Decision Tree Classifer', 'RegLog']:\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00       810\n           1       1.00      1.00      1.00      1769\n\n    accuracy                           1.00      2579\n   macro avg       1.00      1.00      1.00      2579\nweighted avg       1.00      1.00      1.00      2579\n\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"fig = plt.figure(figsize=(35, 30))\nDTtree = tree.plot_tree(DTclf, feature_names = np.array(numerical_cols), class_names = ['Normal', 'Attack'], fontsize=14, proportion=True, filled=True, rounded=True)\nfor o in DTtree:\n    arrow = o.arrow_patch\n    if arrow is not None:\n        arrow.set_edgecolor('red')\n        arrow.set_linewidth(3)\nfig.savefig('Decision Tree Classifier XAI Visualization Part 2.png')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:16:02.156916Z","iopub.execute_input":"2025-03-18T17:16:02.157333Z","iopub.status.idle":"2025-03-18T17:16:04.295227Z","shell.execute_reply.started":"2025-03-18T17:16:02.157300Z","shell.execute_reply":"2025-03-18T17:16:04.293797Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 3500x3000 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Example: Check the shapes of X and y\nprint(f\"Shape of X: {X.shape}\")\nprint(f\"Shape of y: {y.shape}\")\n\n# If X and y are pandas objects, align them\nif isinstance(X, pd.DataFrame) and isinstance(y, pd.Series):\n    X, y = X.align(y, join='inner', axis=0)\n\n# Reset indices if needed\nX = X.reset_index(drop=True)\ny = y.reset_index(drop=True)\n\n# Ensure the lengths match\nif len(X) != len(y):\n    raise ValueError(f\"X and y have mismatched lengths: {len(X)} vs {len(y)}\")\n\n# Proceed with train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Scale the features\nscaler = StandardScaler()\nX_train_transform = scaler.fit_transform(X_train)\nX_test_transform = scaler.transform(X_test)\n\nprint(f\"X_train_transform shape: {X_train_transform.shape}\")\nprint(f\"y_train shape: {y_train.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:20:25.842638Z","iopub.execute_input":"2025-03-18T17:20:25.843013Z","iopub.status.idle":"2025-03-18T17:20:25.870532Z","shell.execute_reply.started":"2025-03-18T17:20:25.842984Z","shell.execute_reply":"2025-03-18T17:20:25.869407Z"}},"outputs":[{"name":"stdout","text":"Shape of X: (10308, 46)\nShape of y: (2579,)\nX_train_transform shape: (2063, 46)\ny_train shape: (2063,)\n","output_type":"stream"}],"execution_count":45},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Check initial shapes\nprint(f\"Initial X shape: {X.shape}\")\nprint(f\"Initial y shape: {y.shape}\")\n\n# Align X and y based on their indices (if pandas objects)\nif isinstance(X, pd.DataFrame) and isinstance(y, pd.Series):\n    X, y = X.align(y, join='inner', axis=0)\n\n# If X is larger than y, truncate X to match y's length\nif len(X) > len(y):\n    X = X.iloc[:len(y)] if isinstance(X, pd.DataFrame) else X[:len(y)]\n\n# Check shapes again\nprint(f\"Aligned X shape: {X.shape}\")\nprint(f\"Aligned y shape: {y.shape}\")\n\n# Proceed with train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Scale the features\nscaler = StandardScaler()\nX_train_transform = scaler.fit_transform(X_train)\nX_test_transform = scaler.transform(X_test)\n\n# Verify final shapes\nprint(f\"X_train_transform shape: {X_train_transform.shape}\")\nprint(f\"y_train shape: {y_train.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:21:32.595533Z","iopub.execute_input":"2025-03-18T17:21:32.595901Z","iopub.status.idle":"2025-03-18T17:21:32.620203Z","shell.execute_reply.started":"2025-03-18T17:21:32.595870Z","shell.execute_reply":"2025-03-18T17:21:32.618965Z"}},"outputs":[{"name":"stdout","text":"Initial X shape: (2579, 46)\nInitial y shape: (2579,)\nAligned X shape: (2579, 46)\nAligned y shape: (2579,)\nX_train_transform shape: (2063, 46)\ny_train shape: (2063,)\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"from xgboost import XGBClassifier\nfrom sklearn import metrics\n\n# Train the XGBoost model\ngbtree = XGBClassifier(n_estimators=300, max_depth=5, random_state=42)\ngbtree.fit(X_train_transform, y_train)\n\n# Predict on the test set\ny_pred = gbtree.predict(X_test_transform)\n\n# Evaluate the model\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:22:11.179659Z","iopub.execute_input":"2025-03-18T17:22:11.180100Z","iopub.status.idle":"2025-03-18T17:22:11.667637Z","shell.execute_reply.started":"2025-03-18T17:22:11.180063Z","shell.execute_reply":"2025-03-18T17:22:11.665982Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.6105\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"# Confusion matrix\nconf_matrix = metrics.confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n\n# Classification report\nclass_report = metrics.classification_report(y_test, y_pred)\nprint(\"Classification Report:\")\nprint(class_report)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:22:25.709086Z","iopub.execute_input":"2025-03-18T17:22:25.709507Z","iopub.status.idle":"2025-03-18T17:22:25.727078Z","shell.execute_reply.started":"2025-03-18T17:22:25.709475Z","shell.execute_reply":"2025-03-18T17:22:25.725688Z"}},"outputs":[{"name":"stdout","text":"Confusion Matrix:\n[[ 39 114]\n [ 87 276]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.31      0.25      0.28       153\n           1       0.71      0.76      0.73       363\n\n    accuracy                           0.61       516\n   macro avg       0.51      0.51      0.51       516\nweighted avg       0.59      0.61      0.60       516\n\n","output_type":"stream"}],"execution_count":48},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot feature importance\nxgboost.plot_importance(gbtree, max_num_features=10)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:22:40.089428Z","iopub.execute_input":"2025-03-18T17:22:40.089798Z","iopub.status.idle":"2025-03-18T17:22:40.560015Z","shell.execute_reply.started":"2025-03-18T17:22:40.089769Z","shell.execute_reply":"2025-03-18T17:22:40.558733Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"# code asal sebelum di ubah yg atas.\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport xgboost\n\n# Example: Splitting data (ensure X and y are aligned)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Scale the features\nscaler = StandardScaler()\nX_train_transform = scaler.fit_transform(X_train)\nX_test_transform = scaler.transform(X_test)\n\n# Check shapes\nprint(f\"X_train_transform shape: {X_train_transform.shape}\")\nprint(f\"y_train shape: {y_train.shape}\")\n\n# Ensure y_train is 1D\nif len(y_train.shape) > 1:\n    y_train = y_train.ravel()\n\n# Train the XGBoost model\ngbtree = xgboost.XGBClassifier(n_estimators=300, max_depth=5)\ngbtree.fit(X_train_transform, y_train)  # Ensure the model is trained\n\n# Evaluate the model\naccuracy = metrics.accuracy_score(y_test, gbtree.predict(X_test_transform))\nprint(f'Accuracy: {accuracy}')\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:23:09.112170Z","iopub.execute_input":"2025-03-18T17:23:09.112619Z","iopub.status.idle":"2025-03-18T17:23:09.590435Z","shell.execute_reply.started":"2025-03-18T17:23:09.112585Z","shell.execute_reply":"2025-03-18T17:23:09.589052Z"}},"outputs":[{"name":"stdout","text":"X_train_transform shape: (2063, 46)\ny_train shape: (2063,)\nAccuracy: 0.6104651162790697\n","output_type":"stream"}],"execution_count":50},{"cell_type":"code","source":"print(len(numerical_cols))  # Length of numerical feature names\nprint(len(shap_mean_importance))  # Length of SHAP importance values\nprint(len(shap_std_importance))  # Length of SHAP standard deviation values\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:23:30.999249Z","iopub.execute_input":"2025-03-18T17:23:30.999601Z","iopub.status.idle":"2025-03-18T17:23:31.006137Z","shell.execute_reply.started":"2025-03-18T17:23:30.999572Z","shell.execute_reply":"2025-03-18T17:23:31.004640Z"}},"outputs":[{"name":"stdout","text":"46\n2579\n2579\n","output_type":"stream"}],"execution_count":51},{"cell_type":"code","source":"# Retrieve full feature names (numerical + categorical)\nfull_feature_names = col_trans.get_feature_names_out()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:23:37.026277Z","iopub.execute_input":"2025-03-18T17:23:37.026656Z","iopub.status.idle":"2025-03-18T17:23:37.031482Z","shell.execute_reply.started":"2025-03-18T17:23:37.026628Z","shell.execute_reply":"2025-03-18T17:23:37.030092Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"# SHAP summary plot\nshap.summary_plot(shap_values, X_test_transform, feature_names=full_feature_names, plot_type=\"bar\")\n\n# Compute feature importance\nshap_mean_importance = np.abs(shap_values).mean(axis=0)\nshap_std_importance = np.abs(shap_values).std(axis=0)\n\n# Create DataFrame with full feature names\nfeature_importance_df = pd.DataFrame({\n     'Feature': full_feature_names,\n     'Weight (Mean)': shap_mean_importance,\n     'Std Dev': shap_std_importance\n}).sort_values(by='Weight (Mean)', ascending=False)\n\n# Display top 10 most important features\nprint(feature_importance_df.head(10))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:23:40.166585Z","iopub.execute_input":"2025-03-18T17:23:40.166958Z","iopub.status.idle":"2025-03-18T17:23:40.592347Z","shell.execute_reply.started":"2025-03-18T17:23:40.166928Z","shell.execute_reply":"2025-03-18T17:23:40.590717Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x950 with 1 Axes>","image/png":"\n"},"metadata":{}},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-54-d45916ec5541>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Create DataFrame with full feature names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m feature_importance_df = pd.DataFrame({\n\u001b[0m\u001b[1;32m     10\u001b[0m      \u001b[0;34m'Feature'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfull_feature_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m      \u001b[0;34m'Weight (Mean)'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mshap_mean_importance\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    776\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    777\u001b[0m             \u001b[0;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 778\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    779\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    780\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    501\u001b[0m             \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"dtype\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    505\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    112\u001b[0m         \u001b[0;31m# figure out the index, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extract_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_extract_index\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    662\u001b[0m             \u001b[0mraw_lengths\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    663\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 664\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Per-column arrays must each be 1-dimensional\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    665\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    666\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mindexes\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mraw_lengths\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Per-column arrays must each be 1-dimensional"],"ename":"ValueError","evalue":"Per-column arrays must each be 1-dimensional","output_type":"error"}],"execution_count":54},{"cell_type":"code","source":"import shap\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\n\n# Load dataset\ndata = load_iris()\nX = pd.DataFrame(data.data, columns=data.feature_names)\ny = data.target\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a Decision Tree classifier\nDTclf = DecisionTreeClassifier(random_state=42)\nDTclf.fit(X_train, y_train)\n\n# Use SHAP to explain the model\nexplainer = shap.TreeExplainer(DTclf)\nshap_values = explainer.shap_values(X_test)\n\n# Compute mean and standard deviation of SHAP values for the positive class (if binary classification)\nshap_values_class_1 = shap_values[1]  # For binary classification, choose the positive class\nshap_mean_importance = np.abs(shap_values_class_1).mean(axis=0)\nshap_std_importance = np.abs(shap_values_class_1).std(axis=0)\n\n# Create summary plot\nshap.summary_plot(shap_values_class_1, X_test, feature_names=X.columns, plot_type=\"bar\")\n\n# Create feature importance DataFrame\nfeature_importance_df = pd.DataFrame({\n    'Feature': X.columns,\n    'Weight (Mean)': shap_mean_importance,\n    'Std Dev': shap_std_importance\n}).sort_values(by='Weight (Mean)', ascending=False)\n\n# Display top features\nprint(feature_importance_df.head(10))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:23:56.071400Z","iopub.execute_input":"2025-03-18T17:23:56.071813Z","iopub.status.idle":"2025-03-18T17:23:56.309578Z","shell.execute_reply.started":"2025-03-18T17:23:56.071781Z","shell.execute_reply":"2025-03-18T17:23:56.308274Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x310 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"             Feature  Weight (Mean)   Std Dev\n2  petal length (cm)       0.352277  0.180089\n3   petal width (cm)       0.104903  0.092071\n1   sepal width (cm)       0.006007  0.008009\n0  sepal length (cm)       0.000000  0.000000\n","output_type":"stream"}],"execution_count":55},{"cell_type":"code","source":"import shap\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\n\n# Load dataset\ndata = load_iris()\nX = pd.DataFrame(data.data, columns=data.feature_names)\ny = data.target\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a Decision Tree classifier\nDTclf = DecisionTreeClassifier(random_state=42)\nDTclf.fit(X_train, y_train)\n\n# Use SHAP to explain the model\nexplainer = shap.TreeExplainer(DTclf)\nshap_values = explainer.shap_values(X_test)\n\n# Aggregate SHAP values across all classes (mean absolute SHAP values)\nshap_values_mean = np.mean([np.abs(class_shap_values) for class_shap_values in shap_values], axis=0)\n\n# Compute mean and standard deviation of SHAP values\nshap_mean_importance = shap_values_mean.mean(axis=0)\nshap_std_importance = shap_values_mean.std(axis=0)\n\n# Create summary plot for one class (optional: choose class 0 for visualization)\nshap.summary_plot(shap_values[0], X_test, feature_names=X.columns, plot_type=\"bar\")\n\n# Create feature importance DataFrame\nfeature_importance_df = pd.DataFrame({\n    'Feature': X.columns,\n    'Weight (Mean)': shap_mean_importance,\n    'Std Dev': shap_std_importance\n}).sort_values(by='Weight (Mean)', ascending=False)\n\n# Display top features\nprint(feature_importance_df.head(10))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:24:02.315632Z","iopub.execute_input":"2025-03-18T17:24:02.316084Z","iopub.status.idle":"2025-03-18T17:24:02.499146Z","shell.execute_reply.started":"2025-03-18T17:24:02.316051Z","shell.execute_reply":"2025-03-18T17:24:02.498067Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x310 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAxYAAAEsCAYAAABewCVFAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABfKklEQVR4nO3dd1gUV9sG8HtZQECqgFRBEezdtWAB7IqiiaBii9FoEks0r+VN3jQ1GjX2GEuQmAjYKSpolIQICBopmthLDKIIWFCQ3vf7g2v3c9xFgQHReP+uyyth5syZZ2YOwzxzzsxI5HK5HERERERERCJo1HcARERERET0+mNiQUREREREojGxICIiIiIi0ZhYEBERERGRaEwsiIiIiIhINCYWREREREQkGhMLIiIiIiISjYkFERERERGJxsSCiIiIiIhE06zvAIhqS0pKCqRSaX2HQfVAIpHAysoK6enpkMvl9R0O1QO2AWIbILaBumNtbV2lcuyxICIiIiIi0ZhYEBERERGRaEwsiIiIiIhINCYWREREREQkGhMLIiIiIiISjYkFERERERGJxsSCiIiIiIhEY2JBRERERESiMbEgIiIiIiLRmFgQEREREZFoTCyIiIiIiEg0JhZERERERCQaEwsiIiIiIhKNiQUREREREYnGxIKIiIiIiERjYkFERERERKIxsSAiIiIiItGYWBARERERkWhMLIiIiIiISDQmFkREREREJBoTCyIiIiIiEo2JBRERERERicbEgoiIiIiIRGNiQUREREREojGxICIiIiIi0ZhYEBERERGRaEwsiIiIiIhINCYWREREREQkGhMLIiIiIiISTSKXy+X1HQSRWJK1pfUdAhEREVGdS53w4KWv09raukrl2GNBRERERESiMbEgIiIiIiLRmFgQEREREZFoTCyIiIiIiEg0JhZERERERCQaEwsiIiIiIhKNiQUREREREYnGxIKIiIiIiET71yYWPj4+kMlkSEtLe2HZJUuWQCaTvYSoatf7778PDw+PWqkrKCgIrq6uyMrKqpX6quv69evo1q0bzp49Wy/rJyIiIiJxXrnEIiwsDHv27KnvMF4ZL2N/5ObmwsfHBxMmTICxsXGdrqsyLVu2hJubGzZu3Ah+DJ6IiIjo9fNKJhZ79+6t7zBeGS9jfwQGBiInJwdjx46t0/W8yPjx43H16lWcOnWq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iIiIiKqt3hOLsLCw+g7hpTM2NsaKFSvqOwwiIiIiolrDZyyIiIiIiEg0JhZERERERCQaEwsiIiIiIhKNiQUREREREYnGxIKIiIiIiERjYkFERERERKIxsSAiIiIiItGYWBARERERkWhMLIiIiIiISDQmFkREREREJBoTCyIiIiIiEo2JBRERERERicbEgoiIiIiIRGNiQUREREREojGxICIiIiIi0ZhYEBERERGRaEwsiIiIiIhINCYWREREREQkGhMLIiIiIiISjYkFERERERGJxsSCiIiIiIhEY2JBRERERESiMbEgIiIiIiLRmFgQEREREZFoTCyIiIiIiEg0JhZERERERCQaEwsiIiIiIhKNiQUREREREYnGxIKIiIiIiERjYkFERERERKIxsSAiIiIiItGYWBARERERkWhMLIiIiIiISDQmFkREREREJJpmfQdAVFu0tLQglUrrOwyqR5qaPKW96dgGiG2A2Abqj0Qul8vrOwgiMUpKSqClpVXfYRARERG90TgUil57RUVFmDhxIvLz8+s7FKon+fn5bANvOLYBYhsgtoH6x8SC/hWuX7+O8vLy+g6D6kl5eTnbwBuObYDYBohtoP4xsSAiIiIiItGYWBARERERkWhMLOi1p62tjRkzZkBbW7u+Q6F6wjZAbAPENkBsA/WPb4UiIiIiIiLR2GNBRERERESiMbEgIiIiIiLR+GlCeqUlJydj9erVuHDhAho2bAh3d3fMmjXrhR/Ek8vl8PPzQ2BgILKystCiRQvMnz8f7du3f0mRU22paRsIDAzEqVOncOnSJWRlZWHVqlUYOHDgS4qaalNN2kBGRgZ2796NuLg43L17F/r6+ujcuTPmzJkDKyurlxg91Yaange+/PJLXLp0CQ8fPoSWlhYcHR3x3nvvoWfPni8pcqotNW0DT9uzZw/Wr1+PPn36YOPGjXUX7BuMPRb0ysrOzsaHH36I0tJSrFmzBrNmzcLBgwexfv36Fy7r5+cHHx8fTJgwARs2bICZmRnmzJmDu3fvvoTIqbaIaQNHjx5FVlYWevfu/RIipbpS0zZw9epVREZGYuDAgVi3bh3+85//4ObNm5gyZQoyMzNfUvRUG8ScB0pKSjBx4kSsW7cOX3/9NYyMjDBv3jz8+eefLyFyqi1i2oBCRkYGfH190ahRozqMlCAnekX99NNP8j59+siz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\n"},"metadata":{}},{"name":"stdout","text":"             Feature  Weight (Mean)   Std Dev\n2  petal length (cm)       0.382464  0.061315\n3   petal width (cm)       0.069935  0.061381\n1   sepal width (cm)       0.004005  0.005339\n0  sepal length (cm)       0.000000  0.000000\n","output_type":"stream"}],"execution_count":56},{"cell_type":"code","source":"# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, cross_validate\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import (\n    roc_auc_score,\n    confusion_matrix,\n    precision_score,\n    recall_score,\n    classification_report,\n)\n\n# Load the dataset (Iris dataset as an example)\ndata = load_iris()\nX = pd.DataFrame(data.data, columns=data.feature_names)\ny = pd.Series(data.target)\n\n# Convert the problem to binary classification (e.g., classify class 0 vs. others)\n# Change this part if your dataset is already binary.\ny_binary = (y == 0).astype(int)  # Classify \"setosa\" (class 0) vs. others\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y_binary, test_size=0.2, random_state=42, stratify=y_binary\n)\n\n# Apply scaling (optional, depending on your dataset)\nscaler = StandardScaler()\nX_train_transform = scaler.fit_transform(X_train)\nX_test_transform = scaler.transform(X_test)\n\n# Define the cross-validation strategy\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=123)\n\n# Initialize the Decision Tree classifier\nDTclf = DecisionTreeClassifier(random_state=123)\n\n# Define scoring metrics for cross-validation\nscoring = ['accuracy', 'precision_micro', 'recall_micro', 'f1_micro', 'roc_auc_ovr']\n\n# Perform cross-validation\ncv_results = cross_validate(\n    estimator=DTclf,\n    X=X_train_transform,\n    y=y_train,\n    scoring=scoring,\n    cv=cv,\n    return_train_score=False,\n)\n\n# Display cross-validation results\nprint(\"Cross-Validation Results:\")\nprint(pd.DataFrame(cv_results))\n\n# Get the mean accuracy from cross-validation results\nmean_accuracy = cv_results['test_accuracy'].mean()\nprint(f\"Mean test accuracy from cross-validation: {mean_accuracy:.5f}\")\n\n# Fit the model on the training set\nDTclf.fit(X=X_train_transform, y=y_train)\n\n# Make predictions on the test set\ny_pred_class = DTclf.predict(X=X_test_transform)\ny_pred_score = DTclf.predict_proba(X=X_test_transform)[:, 1]\n\n# Calculate metrics on the test set\nauc_ontest = roc_auc_score(y_true=y_test, y_score=y_pred_score)\ncm_ontest = confusion_matrix(y_true=y_test, y_pred=y_pred_class)\nprecision_ontest = precision_score(y_true=y_test, y_pred=y_pred_class)\nrecall_ontest = recall_score(y_true=y_test, y_pred=y_pred_class)\ncls_report_ontest = classification_report(y_true=y_test, y_pred=y_pred_class)\n\n# Print results\nprint(f\"The model scores {auc_ontest:.5f} ROC AUC on the test set.\")\nprint(f\"The precision score on the test set: {precision_ontest:.5f}\")\nprint(f\"The recall score on the test set: {recall_ontest:.5f}\")\nprint(\"Confusion Matrix:\\n\", cm_ontest)\nprint(\"Classification Report:\\n\", cls_report_ontest)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:24:08.086852Z","iopub.execute_input":"2025-03-18T17:24:08.087205Z","iopub.status.idle":"2025-03-18T17:24:08.197703Z","shell.execute_reply.started":"2025-03-18T17:24:08.087177Z","shell.execute_reply":"2025-03-18T17:24:08.196189Z"}},"outputs":[{"name":"stdout","text":"Cross-Validation Results:\n   fit_time  score_time  test_accuracy  test_precision_micro  \\\n0  0.001930    0.014082            1.0                   1.0   \n1  0.001870    0.008360            1.0                   1.0   \n2  0.001662    0.008985            1.0                   1.0   \n3  0.001662    0.007912            1.0                   1.0   \n4  0.001566    0.007493            1.0                   1.0   \n\n   test_recall_micro  test_f1_micro  test_roc_auc_ovr  \n0                1.0            1.0               1.0  \n1                1.0            1.0               1.0  \n2                1.0            1.0               1.0  \n3                1.0            1.0               1.0  \n4                1.0            1.0               1.0  \nMean test accuracy from cross-validation: 1.00000\nThe model scores 1.00000 ROC AUC on the test set.\nThe precision score on the test set: 1.00000\nThe recall score on the test set: 1.00000\nConfusion Matrix:\n [[20  0]\n [ 0 10]]\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        20\n           1       1.00      1.00      1.00        10\n\n    accuracy                           1.00        30\n   macro avg       1.00      1.00      1.00        30\nweighted avg       1.00      1.00      1.00        30\n\n","output_type":"stream"}],"execution_count":57},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split, cross_validate, StratifiedKFold\nfrom sklearn.metrics import (\n    roc_auc_score,\n    confusion_matrix,\n    precision_score,\n    recall_score,\n    classification_report,\n)\nfrom sklearn import tree\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\n\n# Check for non-numeric columns\nnon_numeric_columns = X.select_dtypes(include=['object']).columns\nprint(f\"Non-numeric columns: {non_numeric_columns}\")\n\n# Encode non-numeric columns\nX_encoded = pd.get_dummies(X, columns=non_numeric_columns)\n\n# Debug encoded data\nprint(f\"Shape of X_encoded: {X_encoded.shape}\")\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(\n    X_encoded, y, test_size=0.2, random_state=42\n)\n\n# Standardize the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Debug transformed data\nprint(f\"X_train_scaled shape: {X_train_scaled.shape}\")\nprint(f\"X_test_scaled shape: {X_test_scaled.shape}\")\n\n# Cross-validation\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=123)\nDTclf = tree.DecisionTreeClassifier()\nscoring = [\"accuracy\", \"precision_micro\", \"recall_micro\", \"f1_micro\", \"roc_auc_ovr\"]\n\ncv_results = cross_validate(\n    estimator=DTclf,\n    X=X_train_scaled,\n    y=y_train,\n    scoring=scoring,\n    cv=cv,\n    return_train_score=False,\n)\n\n# Evaluate cross-validation results\nprint(cv_results)\nprint(f\"Mean test accuracy: {cv_results['test_accuracy'].mean():.5f}\")\n\n# Train the model\nDTclf.fit(X=X_train_scaled, y=y_train)\n\n# Test set predictions\ny_pred_class = DTclf.predict(X=X_test_scaled)\ny_pred_score = DTclf.predict_proba(X=X_test_scaled)[:, 1]\n\n# Compute metrics\nauc_ontest = roc_auc_score(y_true=y_test, y_score=y_pred_score)\ncm_ontest = confusion_matrix(y_true=y_test, y_pred=y_pred_class)\nprecision_ontest = precision_score(y_true=y_test, y_pred=y_pred_class)\nrecall_ontest = recall_score(y_true=y_test, y_pred=y_pred_class)\ncls_report_ontest = classification_report(y_true=y_test, y_pred=y_pred_class)\n\n# Print results\nprint(f\"The model scores {auc_ontest:.5f} ROC AUC on the test set.\")\nprint(f\"The precision score on the test set: {precision_ontest:.5f}\")\nprint(f\"The recall score on the test set: {recall_ontest:.5f}\")\nprint(\"Confusion Matrix:\\n\", cm_ontest)\nprint(\"Classification Report:\\n\", cls_report_ontest)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:35:42.868558Z","iopub.execute_input":"2025-03-18T17:35:42.868967Z","iopub.status.idle":"2025-03-18T17:35:43.030953Z","shell.execute_reply.started":"2025-03-18T17:35:42.868937Z","shell.execute_reply":"2025-03-18T17:35:43.029363Z"}},"outputs":[{"name":"stdout","text":"Non-numeric columns: Index(['Class'], dtype='object')\nShape of X_encoded: (2579, 54)\nX_train_scaled shape: (2063, 54)\nX_test_scaled shape: (516, 54)\n{'fit_time': array([0.00500703, 0.00498557, 0.00568056, 0.00518012, 0.00490761]), 'score_time': array([0.00933886, 0.01117754, 0.01104808, 0.01161337, 0.00895119]), 'test_accuracy': array([1., 1., 1., 1., 1.]), 'test_precision_micro': array([1., 1., 1., 1., 1.]), 'test_recall_micro': array([1., 1., 1., 1., 1.]), 'test_f1_micro': array([1., 1., 1., 1., 1.]), 'test_roc_auc_ovr': array([1., 1., 1., 1., 1.])}\nMean test accuracy: 1.00000\nThe model scores 1.00000 ROC AUC on the test set.\nThe precision score on the test set: 1.00000\nThe recall score on the test set: 1.00000\nConfusion Matrix:\n [[153   0]\n [  0 363]]\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00       153\n           1       1.00      1.00      1.00       363\n\n    accuracy                           1.00       516\n   macro avg       1.00      1.00      1.00       516\nweighted avg       1.00      1.00      1.00       516\n\n","output_type":"stream"}],"execution_count":76},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn import metrics\nimport lime.lime_tabular\nimport xgboost\nimport shap\nimport numpy as np\n\n# Load dataset\ndata = pd.read_csv('/kaggle/input/ukm-ids20-tajul/UKM-IDS20_Testing set.csv')  # Replace with the actual file path\n\n# Separate features and target\nX = data.drop(columns=['target'])  # Replace 'target' with your target column name\ny = data['target']  # Replace 'target' with your target column name\n\n# Get feature names\nfeatures = X.columns.tolist()\nprint(\"Feature names:\", features)\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n\n# Apply transformations if needed\nX_train_transform = X_train\nX_test_transform = X_test\ny2_train_transform = y_train\ny2_test_transform = y_test\n\n# Train MLP Classifier\nMLP = MLPClassifier(random_state=123, solver='adam', max_iter=8000)\nMLP.fit(X_train_transform, y2_train_transform)\n\n# Train XGBoost model\nxg_train = xgboost.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgboost.DMatrix(X_test_transform, label=y2_test_transform)\n\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),\n    \"eval_metric\": \"logloss\"\n}\n\nmodel = xgboost.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n\n# SHAP Analysis\nexplainer = shap.TreeExplainer(model)\nshap_values_test = explainer.shap_values(X_test_transform)\nshap.initjs()\n\n# Summary plots\nshap.summary_plot(shap_values_test, X_test_transform, plot_type=\"bar\")\n\n# LIME Analysis\npredict_fn = lambda x: model.predict(xgboost.DMatrix(x)).astype(float)\nexplainer = lime.lime_tabular.LimeTabularExplainer(\n    X_train_transform.values,  # Convert DataFrame to NumPy array if necessary\n    feature_names=features,\n    class_names=['Class 0', 'Class 1'],  # Update class names as needed\n    kernel_width=3\n)\n\nnp.random.seed(1)\ni = 520  # Example instance index\nexp = explainer.explain_instance(X_test_transform.iloc[i].values, predict_fn, num_features=10)\nexp.save_to_file('lime_explanation520.html')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:43:33.227569Z","iopub.execute_input":"2025-03-18T17:43:33.227958Z","iopub.status.idle":"2025-03-18T17:43:33.278570Z","shell.execute_reply.started":"2025-03-18T17:43:33.227928Z","shell.execute_reply":"2025-03-18T17:43:33.276908Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-79-b12f7865cc0d>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Separate features and target\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'target'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Replace 'target' with your target column name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'target'\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# Replace 'target' with your target column name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5579\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5580\u001b[0m         \"\"\"\n\u001b[0;32m-> 5581\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5582\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5583\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4787\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4788\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4789\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4829\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4830\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4831\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7069\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7070\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask].tolist()} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7071\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7072\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['target'] not found in axis\""],"ename":"KeyError","evalue":"\"['target'] not found in axis\"","output_type":"error"}],"execution_count":79},{"cell_type":"code","source":"import sklearn\nimport sklearn.datasets\nimport sklearn.ensemble\nimport numpy as np\nimport lime\nimport lime.lime_tabular\nimport xgboost\nfrom __future__ import print_function\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nimport shap\nimport matplotlib.pylab as pl\n\n# Train MLP Classifier\nMLP = MLPClassifier(random_state=123, solver='adam', max_iter=8000)\nMLP.fit(X_train_transform, y2_train_transform)\n\n# Train XGBoost model\nxg_train = xgboost.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgboost.DMatrix(X_test_transform, label=y2_test_transform)\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),\n    \"eval_metric\": \"logloss\"\n}\nmodel = xgboost.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n\n# SHAP Analysis\nexplainer = shap.TreeExplainer(model)\nshap_values_test = explainer.shap_values(X_test)\nshap.initjs()\n\n# Force plot for a single instance\nshap.force_plot(explainer.expected_value, shap_values_test[5, :], X_test.iloc[5, :])\n\n# Force plot for multiple instances\nshap.force_plot(explainer.expected_value, shap_values_test[:1000, :], X_test.iloc[:1000, :])\n\n# Summary plots\nshap.summary_plot(shap_values_test, X_test, plot_type=\"bar\")\nshap.summary_plot(shap_values_test, X_test)\n\n# Dependence plots\nfor name in X_test.columns:\n    shap.dependence_plot(name, shap_values_test, X_test, display_features=X_test)\n\n# SHAP interaction values\nshap_interaction_values = shap.TreeExplainer(model).shap_interaction_values(X_test.iloc[:2000, :])\nshap.summary_plot(shap_interaction_values, X_test.iloc[:2000, :])\n\n# Train XGBoost Classifier\ngbtree = xgboost.XGBClassifier(n_estimators=300, max_depth=5)\ngbtree.fit(X_train_transform, y2_train_transform)\n\n# Evaluate accuracy\nfrom sklearn import metrics\naccuracy = metrics.accuracy_score(y2_test_transform, gbtree.predict(X_test_transform))\nprint(f\"Accuracy: {accuracy}\")\n\n# LIME Analysis\npredict_fn = lambda x: gbtree.predict_proba(x).astype(float)\nfeatures = np.array(numerical_cols)\nexplainer = lime.lime_tabular.LimeTabularExplainer(\n    X_train_transform,\n    feature_names=features,\n    class_names=['Normal', 'Attack'],\n    kernel_width=3\n)\nnp.random.seed(1)\ni = 520\nexp = explainer.explain_instance(X_test_transform[i], predict_fn, num_features=10)\nexp.save_to_file('lime_explanation520.html')\n\n# Print true class\nprint('True class: ')\nif y2_test_transform[i] == 0:\n    print('Normal')\nelse:\n    print('Attack')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:38:54.596383Z","iopub.execute_input":"2025-03-18T17:38:54.596800Z","iopub.status.idle":"2025-03-18T17:38:54.634017Z","shell.execute_reply.started":"2025-03-18T17:38:54.596766Z","shell.execute_reply":"2025-03-18T17:38:54.632356Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-78-7ecc293f3d75>\u001b[0m in \u001b[0;36m<cell line: 17>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Train MLP Classifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mMLP\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMLPClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m123\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msolver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'adam'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m8000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0mMLP\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_transform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my2_train_transform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;31m# Train XGBoost model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    747\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    748\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 749\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mincremental\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    750\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    751\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check_solver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, incremental)\u001b[0m\n\u001b[1;32m    435\u001b[0m         )\n\u001b[1;32m    436\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 437\u001b[0;31m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mincremental\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfirst_pass\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    438\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    439\u001b[0m         \u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py\u001b[0m in \u001b[0;36m_validate_input\u001b[0;34m(self, X, y, incremental, reset)\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_validate_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mincremental\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1089\u001b[0;31m         X, y = self._validate_data(\n\u001b[0m\u001b[1;32m   1090\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    582\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 584\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    585\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    586\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1122\u001b[0m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmulti_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_numeric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1124\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1125\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1126\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    395\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    396\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 397\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    398\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    399\u001b[0m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [120, 10308]"],"ename":"ValueError","evalue":"Found input variables with inconsistent numbers of samples: [120, 10308]","output_type":"error"}],"execution_count":78},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn import metrics\nimport lime.lime_tabular\nimport xgboost as xgb\nimport shap\nimport numpy as np\n\n# Load dataset\ndata = pd.read_csv('/kaggle/input/ukm-ids20-tajul/UKM-IDS20_Testing set.csv')  # Replace with the actual file path\n\n# Separate features and target\nX = data.drop(columns=['target'])  # Replace 'target' with your target column name\ny = data['target']  # Replace 'target' with your target column name\n\n# Ensure target variable is binary\nprint(\"Unique values in target before mapping:\", np.unique(y))  # Debugging\ny = (y > 0).astype(int)  # Map all non-zero values to 1, keep 0 as 0\nprint(\"Unique values in target after mapping:\", np.unique(y))  # Debugging\n\n# Get feature names\nfeatures = X.columns.tolist()\nprint(\"Feature names:\", features)\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n\n# Apply transformations if needed (no transformations in this case)\nX_train_transform = X_train\nX_test_transform = X_test\ny2_train_transform = y_train\ny2_test_transform = y_test\n\n# Train MLP Classifier\nMLP = MLPClassifier(random_state=123, solver='adam', max_iter=8000)\nMLP.fit(X_train_transform, y2_train_transform)\n\n# Train XGBoost model\nxg_train = xgb.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgb.DMatrix(X_test_transform, label=y2_test_transform)\n\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",  # Binary classification\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # Mean of binary target\n    \"eval_metric\": \"logloss\"\n}\n\nmodel = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n\n# SHAP Analysis\nexplainer = shap.TreeExplainer(model)\nshap_values_test = explainer.shap_values(X_test_transform)\nshap.initjs()\n\n# Summary plots\nshap.summary_plot(shap_values_test, X_test_transform, plot_type=\"bar\")\n\n# LIME Analysis\n# LIME expects NumPy arrays, and the predict function must return probabilities.\npredict_fn = lambda x: model.predict(xgb.DMatrix(x)).reshape(-1, 1)  # Returns probabilities\nexplainer = lime.lime_tabular.LimeTabularExplainer(\n    X_train_transform.values,  # Convert DataFrame to NumPy array\n    feature_names=features,\n    class_names=['Class 0', 'Class 1'],  # Update class names as needed\n    kernel_width=3\n)\n\n# Explain a single instance\nnp.random.seed(1)\ni = 520  # Example instance index\nexp = explainer.explain_instance(X_test_transform.iloc[i].values, predict_fn, num_features=10)\nexp.save_to_file('lime_explanation520.html')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:43:58.257776Z","iopub.execute_input":"2025-03-18T18:43:58.259031Z","iopub.status.idle":"2025-03-18T18:43:58.327386Z","shell.execute_reply.started":"2025-03-18T18:43:58.258980Z","shell.execute_reply":"2025-03-18T18:43:58.325818Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-140-936ec0cc7532>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Separate features and target\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'target'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Replace 'target' with your target column name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'target'\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# Replace 'target' with your target column name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5579\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5580\u001b[0m         \"\"\"\n\u001b[0;32m-> 5581\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5582\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5583\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4787\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4788\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4789\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4829\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4830\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4831\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7069\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7070\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask].tolist()} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7071\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7072\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['target'] not found in axis\""],"ename":"KeyError","evalue":"\"['target'] not found in axis\"","output_type":"error"}],"execution_count":140},{"cell_type":"code","source":"print(\"Column names in the dataset:\", data.columns.tolist())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:44:55.469134Z","iopub.execute_input":"2025-03-18T18:44:55.469504Z","iopub.status.idle":"2025-03-18T18:44:55.475635Z","shell.execute_reply.started":"2025-03-18T18:44:55.469477Z","shell.execute_reply":"2025-03-18T18:44:55.474313Z"}},"outputs":[{"name":"stdout","text":"Column names in the dataset: ['dur', 'trnspt', 'srvs', 'flag_n', 'flag_arst', 'flag_uc', 'flag_sign', 'flag_synrst', 'flag_a', 'flag_othr', 'src_pkts', 'dst_pkts', 'urg_bits', 'push_pkts', 'no_lnkd', 'arp', 'src_ttl', 'dst_ttl', 'pkts_dirctn', 'src_byts', 'dst_byts', 'src_avg_byts', 'dst_avg_byts', 'strt_t', 'end_t', 'dst_host_count', 'host_dst _count', 'rtt_first_ack', 'rtt_avg', 'avg_t_sent', 'avg_t_got', 'repeated', 'fst_src_sqc', 'fst_dst_sqc', 'src_re', 'dst_re', 'src_fast_re', 'dst_fast_re', 'ovrlp_count', 'long_frag_count', 'dns_ratio', 'avg_rr', 'http_rqsts_count', 'http_redirct_count', 'http_clnt_error_count', 'http_srv_error_count', 'Class', 'Binary']\n","output_type":"stream"}],"execution_count":141},{"cell_type":"code","source":"# Display the column names in the dataset\nprint(data.columns)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:44:21.289685Z","iopub.execute_input":"2025-03-18T17:44:21.290059Z","iopub.status.idle":"2025-03-18T17:44:21.296403Z","shell.execute_reply.started":"2025-03-18T17:44:21.290033Z","shell.execute_reply":"2025-03-18T17:44:21.294951Z"}},"outputs":[{"name":"stdout","text":"Index(['dur', 'trnspt', 'srvs', 'flag_n', 'flag_arst', 'flag_uc', 'flag_sign',\n       'flag_synrst', 'flag_a', 'flag_othr', 'src_pkts', 'dst_pkts',\n       'urg_bits', 'push_pkts', 'no_lnkd', 'arp', 'src_ttl', 'dst_ttl',\n       'pkts_dirctn', 'src_byts', 'dst_byts', 'src_avg_byts', 'dst_avg_byts',\n       'strt_t', 'end_t', 'dst_host_count', 'host_dst _count', 'rtt_first_ack',\n       'rtt_avg', 'avg_t_sent', 'avg_t_got', 'repeated', 'fst_src_sqc',\n       'fst_dst_sqc', 'src_re', 'dst_re', 'src_fast_re', 'dst_fast_re',\n       'ovrlp_count', 'long_frag_count', 'dns_ratio', 'avg_rr',\n       'http_rqsts_count', 'http_redirct_count', 'http_clnt_error_count',\n       'http_srv_error_count', 'Class', 'Binary'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":80},{"cell_type":"code","source":"import pandas as pd\n\n# Load dataset\ndata = pd.read_csv('/kaggle/input/ukm-ids20-tajul/UKM-IDS20_Testing set.csv')  # Replace with the actual file path\n\n# Display column names\nprint(\"Columns in the dataset:\", data.columns)\n\n# Check unique values in potential target columns\nprint(\"Unique values in 'Class':\", data['Class'].unique())\nprint(\"Unique values in 'Binary':\", data['Binary'].unique())\n\n# Choose the appropriate target column (replace 'Class' or 'Binary' as needed)\nX = data.drop(columns=['Class'])  # Replace 'Class' with the correct target column name\ny = data['Class']  # Replace 'Class' with the correct target column name\n\n# Print the first few rows to confirm\nprint(data.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:45:41.037597Z","iopub.execute_input":"2025-03-18T17:45:41.038011Z","iopub.status.idle":"2025-03-18T17:45:41.075592Z","shell.execute_reply.started":"2025-03-18T17:45:41.037978Z","shell.execute_reply":"2025-03-18T17:45:41.074297Z"}},"outputs":[{"name":"stdout","text":"Columns in the dataset: Index(['dur', 'trnspt', 'srvs', 'flag_n', 'flag_arst', 'flag_uc', 'flag_sign',\n       'flag_synrst', 'flag_a', 'flag_othr', 'src_pkts', 'dst_pkts',\n       'urg_bits', 'push_pkts', 'no_lnkd', 'arp', 'src_ttl', 'dst_ttl',\n       'pkts_dirctn', 'src_byts', 'dst_byts', 'src_avg_byts', 'dst_avg_byts',\n       'strt_t', 'end_t', 'dst_host_count', 'host_dst _count', 'rtt_first_ack',\n       'rtt_avg', 'avg_t_sent', 'avg_t_got', 'repeated', 'fst_src_sqc',\n       'fst_dst_sqc', 'src_re', 'dst_re', 'src_fast_re', 'dst_fast_re',\n       'ovrlp_count', 'long_frag_count', 'dns_ratio', 'avg_rr',\n       'http_rqsts_count', 'http_redirct_count', 'http_clnt_error_count',\n       'http_srv_error_count', 'Class', 'Binary'],\n      dtype='object')\nUnique values in 'Class': ['Normal' 'UDP data flood' 'ARP poisining' 'TCP flood'\n 'BeEF HTTP exploits' 'Metasploit exploits' 'Port scanning'\n 'Mass HTTP requests']\nUnique values in 'Binary': [1 0]\n           dur  trnspt  srvs  flag_n  flag_arst  flag_uc  flag_sign  \\\n0     1.022298      17    53       0          0        0          0   \n1  5731.939163      17    80       0          0        0          0   \n2  9838.000000     256     0       0          0        0          0   \n3    97.072445       6    80       0          0        0          0   \n4    11.999113       6   135       1          0        0          0   \n\n   flag_synrst  flag_a  flag_othr  ...  ovrlp_count  long_frag_count  \\\n0            0       0          0  ...            0                0   \n1            0       0          0  ...            0                0   \n2            0       0          0  ...            0                0   \n3            1       0          0  ...            0                0   \n4            0       0          0  ...            0                0   \n\n   dns_ratio  avg_rr  http_rqsts_count  http_redirct_count  \\\n0        1.0     2.0                 0                   0   \n1        0.0     0.0                 0                   0   \n2        0.0     0.0                 0                   0   \n3        0.0     0.0                 0                   0   \n4        0.0     0.0                 0                   0   \n\n   http_clnt_error_count  http_srv_error_count           Class  Binary  \n0                      0                     0          Normal       1  \n1                      0                     0  UDP data flood       0  \n2                      0                     0   ARP poisining       0  \n3                      0                     0       TCP flood       0  \n4                      0                     0          Normal       1  \n\n[5 rows x 48 columns]\n","output_type":"stream"}],"execution_count":82},{"cell_type":"code","source":"import xgboost as xgb\n\n# Create DMatrix\nxg_train = xgb.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgb.DMatrix(X_test_transform, label=y2_test_transform)\n\n# Update parameters for multi-class classification\nnum_classes = len(np.unique(y2_train_transform))  # Number of unique classes\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"multi:softmax\",  # Use \"multi:softmax\" for classification\n    \"num_class\": num_classes,     # Number of classes\n    \"subsample\": 0.5,\n    \"eval_metric\": \"mlogloss\"     # Use multi-class log loss\n}\n\n# Train XGBoost model\nmodel = xgb.train(\n    params, \n    xg_train, \n    num_boost_round=5000, \n    evals=[(xg_test, \"test\")], \n    verbose_eval=100, \n    early_stopping_rounds=20\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:57:04.845065Z","iopub.execute_input":"2025-03-18T17:57:04.845492Z","iopub.status.idle":"2025-03-18T17:57:11.240145Z","shell.execute_reply.started":"2025-03-18T17:57:04.845459Z","shell.execute_reply":"2025-03-18T17:57:11.238373Z"}},"outputs":[{"name":"stdout","text":"[0]\ttest-mlogloss:2.04127\n[100]\ttest-mlogloss:0.58659\n[200]\ttest-mlogloss:0.21711\n[300]\ttest-mlogloss:0.08633\n[400]\ttest-mlogloss:0.03753\n[500]\ttest-mlogloss:0.01889\n[600]\ttest-mlogloss:0.01108\n[700]\ttest-mlogloss:0.00737\n[800]\ttest-mlogloss:0.00607\n[900]\ttest-mlogloss:0.00549\n[1000]\ttest-mlogloss:0.00517\n[1100]\ttest-mlogloss:0.00497\n[1200]\ttest-mlogloss:0.00483\n[1300]\ttest-mlogloss:0.00474\n[1400]\ttest-mlogloss:0.00467\n[1500]\ttest-mlogloss:0.00463\n[1600]\ttest-mlogloss:0.00459\n[1700]\ttest-mlogloss:0.00456\n[1800]\ttest-mlogloss:0.00455\n[1900]\ttest-mlogloss:0.00452\n[2000]\ttest-mlogloss:0.00450\n[2033]\ttest-mlogloss:0.00450\n","output_type":"stream"}],"execution_count":90},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Make predictions on the test set\ny_pred = model.predict(xg_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y2_test_transform, y_pred)\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n# Classification report\nprint(\"Classification Report:\")\nprint(classification_report(y2_test_transform, y_pred))\n\n# Confusion matrix\nprint(\"Confusion Matrix:\")\nprint(confusion_matrix(y2_test_transform, y_pred))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:58:22.244642Z","iopub.execute_input":"2025-03-18T17:58:22.245083Z","iopub.status.idle":"2025-03-18T17:58:22.289076Z","shell.execute_reply.started":"2025-03-18T17:58:22.245052Z","shell.execute_reply":"2025-03-18T17:58:22.287944Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 1.0000\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        23\n           1       1.00      1.00      1.00        14\n           2       1.00      1.00      1.00        28\n           3       1.00      1.00      1.00        18\n           4       1.00      1.00      1.00       363\n           5       1.00      1.00      1.00        22\n           6       1.00      1.00      1.00        29\n           7       1.00      1.00      1.00        19\n\n    accuracy                           1.00       516\n   macro avg       1.00      1.00      1.00       516\nweighted avg       1.00      1.00      1.00       516\n\nConfusion Matrix:\n[[ 23   0   0   0   0   0   0   0]\n [  0  14   0   0   0   0   0   0]\n [  0   0  28   0   0   0   0   0]\n [  0   0   0  18   0   0   0   0]\n [  0   0   0   0 363   0   0   0]\n [  0   0   0   0   0  22   0   0]\n [  0   0   0   0   0   0  29   0]\n [  0   0   0   0   0   0   0  19]]\n","output_type":"stream"}],"execution_count":91},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot feature importance\nxgb.plot_importance(model, max_num_features=10)  # Adjust max_num_features as needed\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T17:58:48.407038Z","iopub.execute_input":"2025-03-18T17:58:48.407423Z","iopub.status.idle":"2025-03-18T17:58:48.685862Z","shell.execute_reply.started":"2025-03-18T17:58:48.407394Z","shell.execute_reply":"2025-03-18T17:58:48.684757Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":92},{"cell_type":"code","source":"# Check the features (X) before passing to the model\nprint(\"Features in X:\", X.columns.tolist())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:05:23.350592Z","iopub.execute_input":"2025-03-18T18:05:23.350976Z","iopub.status.idle":"2025-03-18T18:05:23.358241Z","shell.execute_reply.started":"2025-03-18T18:05:23.350948Z","shell.execute_reply":"2025-03-18T18:05:23.356816Z"}},"outputs":[{"name":"stdout","text":"Features in X: ['dur', 'trnspt', 'srvs', 'flag_n', 'flag_arst', 'flag_uc', 'flag_sign', 'flag_synrst', 'flag_a', 'flag_othr', 'src_pkts', 'dst_pkts', 'urg_bits', 'push_pkts', 'no_lnkd', 'arp', 'src_ttl', 'dst_ttl', 'pkts_dirctn', 'src_byts', 'dst_byts', 'src_avg_byts', 'dst_avg_byts', 'strt_t', 'end_t', 'dst_host_count', 'host_dst _count', 'rtt_first_ack', 'rtt_avg', 'avg_t_sent', 'avg_t_got', 'repeated', 'fst_src_sqc', 'fst_dst_sqc', 'src_re', 'dst_re', 'src_fast_re', 'dst_fast_re', 'ovrlp_count', 'long_frag_count', 'dns_ratio', 'avg_rr', 'http_rqsts_count', 'http_redirct_count', 'http_clnt_error_count', 'http_srv_error_count', 'Binary']\n","output_type":"stream"}],"execution_count":100},{"cell_type":"code","source":"# If X is a NumPy array, print the saved feature names\nprint(\"Feature names:\", feature_names)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:05:39.749770Z","iopub.execute_input":"2025-03-18T18:05:39.750143Z","iopub.status.idle":"2025-03-18T18:05:39.755932Z","shell.execute_reply.started":"2025-03-18T18:05:39.750113Z","shell.execute_reply":"2025-03-18T18:05:39.754642Z"}},"outputs":[{"name":"stdout","text":"Feature names: ['feature1', 'feature2', 'feature3', Ellipsis]\n","output_type":"stream"}],"execution_count":101},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Encode target variable\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)  # Transform string labels to numeric\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Transform X_train and X_test if needed (e.g., scaling or encoding)\nX_train_transform = X_train.values  # Convert DataFrame to NumPy array\nX_test_transform = X_test.values    # Convert DataFrame to NumPy array\n\n# Create DMatrix with feature names\nxg_train = xgb.DMatrix(X_train_transform, label=y_train, feature_names=feature_names)\nxg_test = xgb.DMatrix(X_test_transform, label=y_test, feature_names=feature_names)\n\n# Train XGBoost model\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"multi:softmax\",  # Use 'multi:softmax' for multi-class classification\n    \"num_class\": len(np.unique(y_train)),  # Number of unique classes\n    \"subsample\": 0.5,\n    \"eval_metric\": \"mlogloss\"\n}\nmodel = xgb.train(params, xg_train, num_boost_round=5000, evals=[(xg_test, \"test\")],\n                  early_stopping_rounds=20, verbose_eval=100)\n\n# Plot feature importance\nxgb.plot_importance(model)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:14:43.055991Z","iopub.execute_input":"2025-03-18T18:14:43.056572Z","iopub.status.idle":"2025-03-18T18:14:50.016918Z","shell.execute_reply.started":"2025-03-18T18:14:43.056485Z","shell.execute_reply":"2025-03-18T18:14:50.015708Z"}},"outputs":[{"name":"stdout","text":"[0]\ttest-mlogloss:2.04127\n[100]\ttest-mlogloss:0.58667\n[200]\ttest-mlogloss:0.21728\n[300]\ttest-mlogloss:0.08655\n[400]\ttest-mlogloss:0.03775\n[500]\ttest-mlogloss:0.01910\n[600]\ttest-mlogloss:0.01126\n[700]\ttest-mlogloss:0.00752\n[800]\ttest-mlogloss:0.00618\n[900]\ttest-mlogloss:0.00559\n[1000]\ttest-mlogloss:0.00526\n[1100]\ttest-mlogloss:0.00506\n[1200]\ttest-mlogloss:0.00493\n[1300]\ttest-mlogloss:0.00483\n[1400]\ttest-mlogloss:0.00476\n[1500]\ttest-mlogloss:0.00471\n[1600]\ttest-mlogloss:0.00467\n[1700]\ttest-mlogloss:0.00464\n[1800]\ttest-mlogloss:0.00462\n[1900]\ttest-mlogloss:0.00459\n[1967]\ttest-mlogloss:0.00459\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":104},{"cell_type":"markdown","source":"**Below are the original codes**","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Encode the target variable\nlabel_encoder = LabelEncoder()\ny2_train_transform = label_encoder.fit_transform(y2_train_transform)\ny2_test_transform = label_encoder.transform(y2_test_transform)\n\n# Create DMatrix\nxg_train = xgboost.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgboost.DMatrix(X_test_transform, label=y2_test_transform)\n\n# Set parameters\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # Ensure this is in (0, 1)\n    \"eval_metric\": \"logloss\"\n}\n\n# Train the model\nmodel = xgboost.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:19:22.466592Z","iopub.execute_input":"2025-03-18T18:19:22.466941Z","iopub.status.idle":"2025-03-18T18:19:22.498963Z","shell.execute_reply.started":"2025-03-18T18:19:22.466915Z","shell.execute_reply":"2025-03-18T18:19:22.497349Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mXGBoostError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-110-3c76bdc62bc5>\u001b[0m in \u001b[0;36m<cell line: 22>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;31m# Train the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgboost\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxg_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxg_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"test\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, custom_metric)\u001b[0m\n\u001b[1;32m    174\u001b[0m     )\n\u001b[1;32m    175\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 176\u001b[0;31m     \u001b[0mbst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbefore_training\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_iteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_boost_round\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/callback.py\u001b[0m in \u001b[0;36mbefore_training\u001b[0;34m(self, model)\u001b[0m\n\u001b[1;32m    157\u001b[0m         \u001b[0;34m\"\"\"Function called before training.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 159\u001b[0;31m             \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbefore_training\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    160\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"before_training should return the model\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_cv\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/callback.py\u001b[0m in \u001b[0;36mbefore_training\u001b[0;34m(self, model)\u001b[0m\n\u001b[1;32m    352\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mbefore_training\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_Model\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0m_Model\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 354\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstarting_round\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnum_boosted_rounds\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    355\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    356\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mnum_boosted_rounds\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2632\u001b[0m         \u001b[0mrounds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_int\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2633\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2634\u001b[0;31m         \u001b[0m_check_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LIB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mXGBoosterBoostedRounds\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbyref\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrounds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2635\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mrounds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36m_check_call\u001b[0;34m(ret)\u001b[0m\n\u001b[1;32m    280\u001b[0m     \"\"\"\n\u001b[1;32m    281\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mret\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 282\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mXGBoostError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpy_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LIB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mXGBGetLastError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    283\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mXGBoostError\u001b[0m: [18:19:22] /workspace/src/objective/./regression_loss.h:71: Check failed: base_score > 0.0f && base_score < 1.0f: base_score must be in (0,1) for logistic loss, got: 3.81677\nStack trace:\n  [bt] (0) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa8dc0a) [0x7e464c894c0a]\n  [bt] (1) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa9c664) [0x7e464c8a3664]\n  [bt] (2) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4c0433) [0x7e464c2c7433]\n  [bt] (3) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4ccd7d) [0x7e464c2d3d7d]\n  [bt] (4) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(XGBoosterBoostedRounds+0x32) [0x7e464bf644d2]\n  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x7e2e) [0x7e4751671e2e]\n  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(+0x4493) [0x7e475166e493]\n  [bt] (7) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0xa3e9) [0x7e47516983e9]\n  [bt] (8) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0x9a00) [0x7e4751697a00]\n\n"],"ename":"XGBoostError","evalue":"[18:19:22] /workspace/src/objective/./regression_loss.h:71: Check failed: base_score > 0.0f && base_score < 1.0f: base_score must be in (0,1) for logistic loss, got: 3.81677\nStack trace:\n  [bt] (0) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa8dc0a) [0x7e464c894c0a]\n  [bt] (1) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa9c664) [0x7e464c8a3664]\n  [bt] (2) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4c0433) [0x7e464c2c7433]\n  [bt] (3) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4ccd7d) [0x7e464c2d3d7d]\n  [bt] (4) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(XGBoosterBoostedRounds+0x32) [0x7e464bf644d2]\n  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x7e2e) [0x7e4751671e2e]\n  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(+0x4493) [0x7e475166e493]\n  [bt] (7) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0xa3e9) [0x7e47516983e9]\n  [bt] (8) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0x9a00) [0x7e4751697a00]\n\n","output_type":"error"}],"execution_count":110},{"cell_type":"markdown","source":"The error persists because the `base_score` parameter is still outside the valid range `(0, 1)`. This indicates that the target variable (`y2_train_transform`) is either not binary or contains unexpected values. Let's systematically debug and fix this issue.\n\n---\n\n### **Step 1: Debug `y2_train_transform`**\nPrint the unique values in `y2_train_transform` to confirm its contents:\n\n```python\nprint(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\nprint(\"Mean value of y2_train_transform:\", np.mean(y2_train_transform))\n```\n\nIf the unique values are not `[0, 1]`, then your target variable needs to be encoded properly.\n\n---\n\n### **Step 2: Ensure Binary Encoding**\nIf your target variable contains labels such as `'Normal'` and `'Attack'`, or other non-binary values, you need to encode them into binary values (0 and 1) using `LabelEncoder`:\n\n```python\nfrom sklearn.preprocessing import LabelEncoder\n\n# Encode the target variable\nlabel_encoder = LabelEncoder()\ny2_train_transform = label_encoder.fit_transform(y2_train_transform)\ny2_test_transform = label_encoder.transform(y2_test_transform)\n\n# Check again\nprint(\"Unique values after encoding:\", np.unique(y2_train_transform))\nprint(\"Mean value after encoding:\", np.mean(y2_train_transform))\n```\n\nNow, `y2_train_transform` should only contain binary values `[0, 1]`.\n\n---\n\n### **Step 3: Set a Valid `base_score`**\nThe `base_score` parameter should be the prior probability of the positive class. It is calculated as the mean of the binary target variable:\n\n```python\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # This will now be in (0, 1)\n    \"eval_metric\": \"logloss\"\n}\n```\n\n---\n\n### **Step 4: Verify Input Data**\nEnsure that `X_train_transform` and `X_test_transform` are numeric arrays. If they are pandas DataFrames, convert them to NumPy arrays:\n\n```python\nX_train_transform = np.array(X_train_transform)\nX_test_transform = np.array(X_test_transform)\n\nprint(\"Shape of X_train_transform:\", X_train_transform.shape)\nprint(\"Shape of X_test_transform:\", X_test_transform.shape)\n```\n\n---\n\n### **Step 5: Updated Training Code**\nHere is the corrected and complete training code:\n\n```python\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\nimport numpy as np\n\n# Encode the target variable\nlabel_encoder = LabelEncoder()\ny2_train_transform = label_encoder.fit_transform(y2_train_transform)\ny2_test_transform = label_encoder.transform(y2_test_transform)\n\n# Verify the target variable\nprint(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\nprint(\"Mean value of y2_train_transform:\", np.mean(y2_train_transform))\n\n# Convert input data to NumPy arrays if needed\nX_train_transform = np.array(X_train_transform)\nX_test_transform = np.array(X_test_transform)\n\n# Create DMatrix\nxg_train = xgb.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgb.DMatrix(X_test_transform, label=y2_test_transform)\n\n# Set parameters\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # Ensure this is in (0, 1)\n    \"eval_metric\": \"logloss\"\n}\n\n# Train the model\nmodel = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n```\n\n---\n\n### **Step 6: Verify the Fix**\nAfter applying the above fixes, the error should no longer occur. If the error persists, double-check the following:\n1. **Target Variable**:\n   Ensure `y2_train_transform` contains only binary values `[0, 1]`.\n\n2. **Input Features**:\n   Ensure `X_train_transform` and `X_test_transform` are numeric arrays.\n\n3. **`base_score`**:\n   Confirm that `np.mean(y2_train_transform)` is within the range `(0, 1)`.\n\n---\n\n### **Why the Error Occurs**\nThe error occurs because the `base_score` parameter in XGBoost is used as the initial prediction for all instances. For the `binary:logistic` objective, this value must be a probability, i.e., in the range `(0, 1)`. If the target variable is not binary, the mean can exceed this range, causing the error.\n\nLet me know if you still face issues!\n","metadata":{}},{"cell_type":"code","source":"print(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\nprint(\"Mean value of y2_train_transform:\", np.mean(y2_train_transform))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:22:39.925733Z","iopub.execute_input":"2025-03-18T18:22:39.926111Z","iopub.status.idle":"2025-03-18T18:22:39.933171Z","shell.execute_reply.started":"2025-03-18T18:22:39.926083Z","shell.execute_reply":"2025-03-18T18:22:39.931770Z"}},"outputs":[{"name":"stdout","text":"Unique values in y2_train_transform: [0 1 2 3 4 5 6 7]\nMean value of y2_train_transform: 3.8167716917111005\n","output_type":"stream"}],"execution_count":111},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Encode the target variable\nlabel_encoder = LabelEncoder()\ny2_train_transform = label_encoder.fit_transform(y2_train_transform)\ny2_test_transform = label_encoder.transform(y2_test_transform)\n\n# Check again\nprint(\"Unique values after encoding:\", np.unique(y2_train_transform))\nprint(\"Mean value after encoding:\", np.mean(y2_train_transform))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:22:54.429762Z","iopub.execute_input":"2025-03-18T18:22:54.430096Z","iopub.status.idle":"2025-03-18T18:22:54.440547Z","shell.execute_reply.started":"2025-03-18T18:22:54.430071Z","shell.execute_reply":"2025-03-18T18:22:54.439089Z"}},"outputs":[{"name":"stdout","text":"Unique values after encoding: [0 1 2 3 4 5 6 7]\nMean value after encoding: 3.8167716917111005\n","output_type":"stream"}],"execution_count":112},{"cell_type":"code","source":"params = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # This will now be in (0, 1)\n    \"eval_metric\": \"logloss\"\n}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:23:08.726530Z","iopub.execute_input":"2025-03-18T18:23:08.726902Z","iopub.status.idle":"2025-03-18T18:23:08.731881Z","shell.execute_reply.started":"2025-03-18T18:23:08.726872Z","shell.execute_reply":"2025-03-18T18:23:08.730571Z"}},"outputs":[],"execution_count":114},{"cell_type":"code","source":"X_train_transform = np.array(X_train_transform)\nX_test_transform = np.array(X_test_transform)\n\nprint(\"Shape of X_train_transform:\", X_train_transform.shape)\nprint(\"Shape of X_test_transform:\", X_test_transform.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:23:18.222316Z","iopub.execute_input":"2025-03-18T18:23:18.222663Z","iopub.status.idle":"2025-03-18T18:23:18.231447Z","shell.execute_reply.started":"2025-03-18T18:23:18.222637Z","shell.execute_reply":"2025-03-18T18:23:18.229749Z"}},"outputs":[{"name":"stdout","text":"Shape of X_train_transform: (2063, 47)\nShape of X_test_transform: (516, 47)\n","output_type":"stream"}],"execution_count":115},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\nimport numpy as np\n\n# Encode the target variable\nlabel_encoder = LabelEncoder()\ny2_train_transform = label_encoder.fit_transform(y2_train_transform)\ny2_test_transform = label_encoder.transform(y2_test_transform)\n\n# Verify the target variable\nprint(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\nprint(\"Mean value of y2_train_transform:\", np.mean(y2_train_transform))\n\n# Convert input data to NumPy arrays if needed\nX_train_transform = np.array(X_train_transform)\nX_test_transform = np.array(X_test_transform)\n\n# Create DMatrix\nxg_train = xgb.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgb.DMatrix(X_test_transform, label=y2_test_transform)\n\n# Set parameters\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # Ensure this is in (0, 1)\n    \"eval_metric\": \"logloss\"\n}\n\n# Train the model\nmodel = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:23:33.469164Z","iopub.execute_input":"2025-03-18T18:23:33.469545Z","iopub.status.idle":"2025-03-18T18:23:33.509422Z","shell.execute_reply.started":"2025-03-18T18:23:33.469509Z","shell.execute_reply":"2025-03-18T18:23:33.506704Z"}},"outputs":[{"name":"stdout","text":"Unique values in y2_train_transform: [0 1 2 3 4 5 6 7]\nMean value of y2_train_transform: 3.8167716917111005\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mXGBoostError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-116-42dd261f5c9b>\u001b[0m in \u001b[0;36m<cell line: 32>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;31m# Train the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxg_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxg_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"test\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, custom_metric)\u001b[0m\n\u001b[1;32m    174\u001b[0m     )\n\u001b[1;32m    175\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 176\u001b[0;31m     \u001b[0mbst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbefore_training\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_iteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_boost_round\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/callback.py\u001b[0m in \u001b[0;36mbefore_training\u001b[0;34m(self, model)\u001b[0m\n\u001b[1;32m    157\u001b[0m         \u001b[0;34m\"\"\"Function called before training.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 159\u001b[0;31m             \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbefore_training\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    160\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"before_training should return the model\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_cv\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/callback.py\u001b[0m in \u001b[0;36mbefore_training\u001b[0;34m(self, model)\u001b[0m\n\u001b[1;32m    352\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mbefore_training\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_Model\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0m_Model\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 354\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstarting_round\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnum_boosted_rounds\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    355\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    356\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mnum_boosted_rounds\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2632\u001b[0m         \u001b[0mrounds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_int\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2633\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2634\u001b[0;31m         \u001b[0m_check_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LIB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mXGBoosterBoostedRounds\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbyref\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrounds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2635\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mrounds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36m_check_call\u001b[0;34m(ret)\u001b[0m\n\u001b[1;32m    280\u001b[0m     \"\"\"\n\u001b[1;32m    281\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mret\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 282\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mXGBoostError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpy_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LIB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mXGBGetLastError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    283\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mXGBoostError\u001b[0m: [18:23:33] /workspace/src/objective/./regression_loss.h:71: Check failed: base_score > 0.0f && base_score < 1.0f: base_score must be in (0,1) for logistic loss, got: 3.81677\nStack trace:\n  [bt] (0) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa8dc0a) [0x7e464c894c0a]\n  [bt] (1) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa9c664) [0x7e464c8a3664]\n  [bt] (2) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4c0433) [0x7e464c2c7433]\n  [bt] (3) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4ccd7d) [0x7e464c2d3d7d]\n  [bt] (4) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(XGBoosterBoostedRounds+0x32) [0x7e464bf644d2]\n  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x7e2e) [0x7e4751671e2e]\n  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(+0x4493) [0x7e475166e493]\n  [bt] (7) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0xa3e9) [0x7e47516983e9]\n  [bt] (8) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0x9a00) [0x7e4751697a00]\n\n"],"ename":"XGBoostError","evalue":"[18:23:33] /workspace/src/objective/./regression_loss.h:71: Check failed: base_score > 0.0f && base_score < 1.0f: base_score must be in (0,1) for logistic loss, got: 3.81677\nStack trace:\n  [bt] (0) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa8dc0a) [0x7e464c894c0a]\n  [bt] (1) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa9c664) [0x7e464c8a3664]\n  [bt] (2) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4c0433) [0x7e464c2c7433]\n  [bt] (3) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4ccd7d) [0x7e464c2d3d7d]\n  [bt] (4) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(XGBoosterBoostedRounds+0x32) [0x7e464bf644d2]\n  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x7e2e) [0x7e4751671e2e]\n  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(+0x4493) [0x7e475166e493]\n  [bt] (7) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0xa3e9) [0x7e47516983e9]\n  [bt] (8) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0x9a00) [0x7e4751697a00]\n\n","output_type":"error"}],"execution_count":116},{"cell_type":"markdown","source":"The issue arises because your target variable (`y2_train_transform`) contains more than two unique values (`[0, 1, 2, 3, 4, 5, 6, 7]`), but the `binary:logistic` objective in XGBoost requires the target to be binary (0 or 1). This mismatch causes the `base_score` calculation to fail, as it is based on the mean of the target variable, which is not in the range `(0, 1)`.\n\nTo resolve this issue, you need to determine whether the problem is a **multi-class classification task** or a **binary classification task** and configure XGBoost accordingly.\n\n---\n\n### **Solution for Multi-Class Classification**\nIf your task involves predicting one of multiple classes (e.g., `[0, 1, 2, 3, 4, 5, 6, 7]`), you should use the `multi:softmax` or `multi:softprob` objective, which are designed for multi-class classification.\n\n1. **Update Parameters for Multi-Class Classification:**\n   Set the `objective` parameter to `multi:softmax` (for class labels) or `multi:softprob` (for probabilities), and specify the number of classes (`num_class`):\n\n   ```python\n   params = {\n       \"eta\": 0.01,\n       \"objective\": \"multi:softmax\",  # or \"multi:softprob\"\n       \"num_class\": len(np.unique(y2_train_transform)),  # Number of unique classes\n       \"subsample\": 0.5,\n       \"eval_metric\": \"mlogloss\"\n   }\n   ```\n\n2. **Train the Model:**\n   Use the updated parameters to train the model:\n\n   ```python\n   model = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n   ```\n\n---\n\n### **Solution for Binary Classification**\nIf your task is binary classification but the target variable contains more than two unique values, you need to **convert the target variable to binary**.\n\n1. **Map Target Values to Binary:**\n   Decide how to map the multi-class labels to binary labels (e.g., `[0, 1]`). For example:\n   - Map all values greater than 0 to 1.\n   - Keep 0 as 0.\n\n   ```python\n   y2_train_transform = (y2_train_transform > 0).astype(int)\n   y2_test_transform = (y2_test_transform > 0).astype(int)\n   ```\n\n2. **Verify the Target Variable:**\n   Confirm that the target variable is now binary:\n\n   ```python\n   print(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\n   print(\"Mean value of y2_train_transform:\", np.mean(y2_train_transform))\n   ```\n\n3. **Update Parameters for Binary Classification:**\n   Use the `binary:logistic` objective:\n\n   ```python\n   params = {\n       \"eta\": 0.01,\n       \"objective\": \"binary:logistic\",\n       \"subsample\": 0.5,\n       \"base_score\": np.mean(y2_train_transform),  # Should now be in (0, 1)\n       \"eval_metric\": \"logloss\"\n   }\n   ```\n\n4. **Train the Model:**\n   Train the model as before:\n\n   ```python\n   model = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n   ```\n\n---\n\n### **Determine the Correct Approach**\n1. **Multi-Class Task**: If your task is to classify instances into one of multiple categories (e.g., `[0, 1, 2, 3, 4, 5, 6, 7]`), use the **multi-class classification solution**.\n2. **Binary Task**: If your task is to distinguish between two classes, map the target variable to binary values and use the **binary classification solution**.\n\n---\n\n### **General Debugging Steps**\n1. **Inspect the Target Variable:**\n   - Print the unique values and their counts:\n     ```python\n     print(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform, return_counts=True))\n     ```\n\n2. **Verify Data Shapes:**\n   - Ensure `X_train_transform` and `X_test_transform` match the shape of the target variable:\n     ```python\n     print(\"Shape of X_train_transform:\", X_train_transform.shape)\n     print(\"Shape of y2_train_transform:\", y2_train_transform.shape)\n     ```\n\n3. **Check for Missing or Invalid Data:**\n   - Ensure there are no missing or invalid values in the data:\n     ```python\n     print(\"Missing values in X_train_transform:\", np.isnan(X_train_transform).sum())\n     print(\"Missing values in y2_train_transform:\", np.isnan(y2_train_transform).sum())\n     ```\n\n---\n\n### **Final Notes**\n- If your task is multi-class classification, you must use `multi:softmax` or `multi:softprob`.\n- If your task is binary classification, ensure the target variable is binary before proceeding.\n\nLet me know if you need further clarification!","metadata":{}},{"cell_type":"markdown","source":"**Solution for Multi-Class Classification**\nIf your task involves predicting one of multiple classes (e.g., [0, 1, 2, 3, 4, 5, 6, 7]), you should use the multi:softmax or multi:softprob objective, which are designed for multi-class classification.\n\n1. **Update Parameters for Multi-Class Classification:**\nSet the objective parameter to multi:softmax (for class labels) or multi:softprob (for probabilities), and specify the number of classes (num_class):","metadata":{}},{"cell_type":"code","source":"\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"multi:softmax\",  # or \"multi:softprob\"\n    \"num_class\": len(np.unique(y2_train_transform)),  # Number of unique classes\n    \"subsample\": 0.5,\n    \"eval_metric\": \"mlogloss\"\n}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:26:31.957379Z","iopub.execute_input":"2025-03-18T18:26:31.957735Z","iopub.status.idle":"2025-03-18T18:26:31.963146Z","shell.execute_reply.started":"2025-03-18T18:26:31.957707Z","shell.execute_reply":"2025-03-18T18:26:31.962088Z"}},"outputs":[],"execution_count":119},{"cell_type":"code","source":"model = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:26:20.654334Z","iopub.execute_input":"2025-03-18T18:26:20.654756Z","iopub.status.idle":"2025-03-18T18:26:26.386289Z","shell.execute_reply.started":"2025-03-18T18:26:20.654725Z","shell.execute_reply":"2025-03-18T18:26:26.385197Z"}},"outputs":[{"name":"stdout","text":"[0]\ttest-mlogloss:2.04127\n[100]\ttest-mlogloss:0.58667\n[200]\ttest-mlogloss:0.21728\n[300]\ttest-mlogloss:0.08655\n[400]\ttest-mlogloss:0.03775\n[500]\ttest-mlogloss:0.01910\n[600]\ttest-mlogloss:0.01126\n[700]\ttest-mlogloss:0.00752\n[800]\ttest-mlogloss:0.00618\n[900]\ttest-mlogloss:0.00559\n[1000]\ttest-mlogloss:0.00526\n[1100]\ttest-mlogloss:0.00506\n[1200]\ttest-mlogloss:0.00493\n[1300]\ttest-mlogloss:0.00483\n[1400]\ttest-mlogloss:0.00476\n[1500]\ttest-mlogloss:0.00471\n[1600]\ttest-mlogloss:0.00467\n[1700]\ttest-mlogloss:0.00464\n[1800]\ttest-mlogloss:0.00462\n[1900]\ttest-mlogloss:0.00459\n[1968]\ttest-mlogloss:0.00459\n","output_type":"stream"}],"execution_count":118},{"cell_type":"markdown","source":"2. **Train the Model:**\n\nUse the updated parameters to train the model:","metadata":{}},{"cell_type":"code","source":"model = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:29:31.030440Z","iopub.execute_input":"2025-03-18T18:29:31.030946Z","iopub.status.idle":"2025-03-18T18:29:36.754707Z","shell.execute_reply.started":"2025-03-18T18:29:31.030909Z","shell.execute_reply":"2025-03-18T18:29:36.753749Z"}},"outputs":[{"name":"stdout","text":"[0]\ttest-mlogloss:2.04127\n[100]\ttest-mlogloss:0.58667\n[200]\ttest-mlogloss:0.21728\n[300]\ttest-mlogloss:0.08655\n[400]\ttest-mlogloss:0.03775\n[500]\ttest-mlogloss:0.01910\n[600]\ttest-mlogloss:0.01126\n[700]\ttest-mlogloss:0.00752\n[800]\ttest-mlogloss:0.00618\n[900]\ttest-mlogloss:0.00559\n[1000]\ttest-mlogloss:0.00526\n[1100]\ttest-mlogloss:0.00506\n[1200]\ttest-mlogloss:0.00493\n[1300]\ttest-mlogloss:0.00483\n[1400]\ttest-mlogloss:0.00476\n[1500]\ttest-mlogloss:0.00471\n[1600]\ttest-mlogloss:0.00467\n[1700]\ttest-mlogloss:0.00464\n[1800]\ttest-mlogloss:0.00462\n[1900]\ttest-mlogloss:0.00459\n[1967]\ttest-mlogloss:0.00459\n","output_type":"stream"}],"execution_count":120},{"cell_type":"code","source":"print(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform, return_counts=True))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:33:23.689984Z","iopub.execute_input":"2025-03-18T18:33:23.690371Z","iopub.status.idle":"2025-03-18T18:33:23.696667Z","shell.execute_reply.started":"2025-03-18T18:33:23.690345Z","shell.execute_reply":"2025-03-18T18:33:23.695503Z"}},"outputs":[{"name":"stdout","text":"Unique values in y2_train_transform: (array([0, 1, 2, 3, 4, 5, 6, 7]), array([  93,   82,  112,   88, 1406,  101,   92,   89]))\n","output_type":"stream"}],"execution_count":121},{"cell_type":"code","source":"print(\"Shape of X_train_transform:\", X_train_transform.shape)\nprint(\"Shape of y2_train_transform:\", y2_train_transform.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:33:33.907670Z","iopub.execute_input":"2025-03-18T18:33:33.908141Z","iopub.status.idle":"2025-03-18T18:33:33.915551Z","shell.execute_reply.started":"2025-03-18T18:33:33.908104Z","shell.execute_reply":"2025-03-18T18:33:33.914232Z"}},"outputs":[{"name":"stdout","text":"Shape of X_train_transform: (2063, 47)\nShape of y2_train_transform: (2063,)\n","output_type":"stream"}],"execution_count":122},{"cell_type":"code","source":"print(\"Missing values in X_train_transform:\", np.isnan(X_train_transform).sum())\nprint(\"Missing values in y2_train_transform:\", np.isnan(y2_train_transform).sum())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:33:42.782851Z","iopub.execute_input":"2025-03-18T18:33:42.783196Z","iopub.status.idle":"2025-03-18T18:33:42.790040Z","shell.execute_reply.started":"2025-03-18T18:33:42.783171Z","shell.execute_reply":"2025-03-18T18:33:42.788679Z"}},"outputs":[{"name":"stdout","text":"Missing values in X_train_transform: 0\nMissing values in y2_train_transform: 0\n","output_type":"stream"}],"execution_count":123},{"cell_type":"markdown","source":"Solution for Binary Classification\nIf your task is binary classification but the target variable contains more than two unique values, you need to convert the target variable to binary.\n\nMap Target Values to Binary:\nDecide how to map the multi-class labels to binary labels (e.g., [0, 1]). For example:\n\nMap all values greater than 0 to 1.\nKeep 0 as 0.","metadata":{}},{"cell_type":"code","source":"y2_train_transform = (y2_train_transform > 0).astype(int)\ny2_test_transform = (y2_test_transform > 0).astype(int)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:34:34.768600Z","iopub.execute_input":"2025-03-18T18:34:34.768942Z","iopub.status.idle":"2025-03-18T18:34:34.774629Z","shell.execute_reply.started":"2025-03-18T18:34:34.768916Z","shell.execute_reply":"2025-03-18T18:34:34.773169Z"}},"outputs":[],"execution_count":126},{"cell_type":"markdown","source":"Verify the Target Variable:\nConfirm that the target variable is now binary:","metadata":{}},{"cell_type":"code","source":"print(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\nprint(\"Mean value of y2_train_transform:\", np.mean(y2_train_transform))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:34:54.655576Z","iopub.execute_input":"2025-03-18T18:34:54.655960Z","iopub.status.idle":"2025-03-18T18:34:54.663466Z","shell.execute_reply.started":"2025-03-18T18:34:54.655929Z","shell.execute_reply":"2025-03-18T18:34:54.661962Z"}},"outputs":[{"name":"stdout","text":"Unique values in y2_train_transform: [0 1]\nMean value of y2_train_transform: 0.954920019389239\n","output_type":"stream"}],"execution_count":127},{"cell_type":"markdown","source":"Update Parameters for Binary Classification:\nUse the binary:logistic objective:","metadata":{}},{"cell_type":"code","source":"params = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # Should now be in (0, 1)\n    \"eval_metric\": \"logloss\"\n}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:35:19.966420Z","iopub.execute_input":"2025-03-18T18:35:19.966828Z","iopub.status.idle":"2025-03-18T18:35:19.972497Z","shell.execute_reply.started":"2025-03-18T18:35:19.966790Z","shell.execute_reply":"2025-03-18T18:35:19.970932Z"}},"outputs":[],"execution_count":129},{"cell_type":"markdown","source":"Train the Model:\nTrain the model as before:","metadata":{}},{"cell_type":"code","source":"model = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:35:40.190315Z","iopub.execute_input":"2025-03-18T18:35:40.190726Z","iopub.status.idle":"2025-03-18T18:35:40.218866Z","shell.execute_reply.started":"2025-03-18T18:35:40.190695Z","shell.execute_reply":"2025-03-18T18:35:40.216240Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mXGBoostError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-130-3c6f1ec5f904>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxg_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxg_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"test\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, custom_metric)\u001b[0m\n\u001b[1;32m    179\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbefore_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m         \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mafter_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[1;32m   2048\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2049\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfobj\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2050\u001b[0;31m             _check_call(\n\u001b[0m\u001b[1;32m   2051\u001b[0m                 _LIB.XGBoosterUpdateOneIter(\n\u001b[1;32m   2052\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_int\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miteration\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36m_check_call\u001b[0;34m(ret)\u001b[0m\n\u001b[1;32m    280\u001b[0m     \"\"\"\n\u001b[1;32m    281\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mret\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 282\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mXGBoostError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpy_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LIB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mXGBGetLastError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    283\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mXGBoostError\u001b[0m: [18:35:40] /workspace/src/objective/regression_obj.cu:144: label must be in [0,1] for logistic regression\nStack trace:\n  [bt] (0) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa8dc0a) [0x7e464c894c0a]\n  [bt] (1) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xaac530) [0x7e464c8b3530]\n  [bt] (2) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x490492) [0x7e464c297492]\n  [bt] (3) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4c5488) [0x7e464c2cc488]\n  [bt] (4) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(XGBoosterUpdateOneIter+0x70) [0x7e464bf68ef0]\n  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x7e2e) [0x7e4751671e2e]\n  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(+0x4493) [0x7e475166e493]\n  [bt] (7) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0xa3e9) [0x7e47516983e9]\n  [bt] (8) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0x9a00) [0x7e4751697a00]\n\n"],"ename":"XGBoostError","evalue":"[18:35:40] /workspace/src/objective/regression_obj.cu:144: label must be in [0,1] for logistic regression\nStack trace:\n  [bt] (0) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xa8dc0a) [0x7e464c894c0a]\n  [bt] (1) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0xaac530) [0x7e464c8b3530]\n  [bt] (2) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x490492) [0x7e464c297492]\n  [bt] (3) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(+0x4c5488) [0x7e464c2cc488]\n  [bt] (4) /usr/local/lib/python3.10/dist-packages/xgboost/lib/libxgboost.so(XGBoosterUpdateOneIter+0x70) [0x7e464bf68ef0]\n  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x7e2e) [0x7e4751671e2e]\n  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(+0x4493) [0x7e475166e493]\n  [bt] (7) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0xa3e9) [0x7e47516983e9]\n  [bt] (8) /usr/lib/python3.10/lib-dynload/_ctypes.cpython-310-x86_64-linux-gnu.so(+0x9a00) [0x7e4751697a00]\n\n","output_type":"error"}],"execution_count":130},{"cell_type":"markdown","source":"The error indicates that the target variable (`y2_train_transform`) contains values outside the range `[0, 1]`. For binary classification with the `binary:logistic` objective in XGBoost, the target labels must strictly be `0` or `1`. Here's how to debug and resolve the issue:\n\n---\n\n### **Step 1: Verify the Target Variable**\nPrint the unique values in your target variable to confirm that it only contains `0` and `1`:\n\n```python\nprint(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\n```\n\nIf you see values other than `0` and `1`, you need to preprocess the target variable.\n\n---\n\n### **Step 2: Ensure Binary Labels**\nIf your target variable contains values outside `[0, 1]`, map them to binary labels. For example:\n- Map all non-zero values to `1`.\n- Keep `0` as `0`.\n\nYou can do this using NumPy:\n\n```python\ny2_train_transform = (y2_train_transform > 0).astype(int)\ny2_test_transform = (y2_test_transform > 0).astype(int)\n```\n\nAfter this, verify the unique values again:\n\n```python\nprint(\"Unique values in y2_train_transform after mapping:\", np.unique(y2_train_transform))\n```\n\n---\n\n### **Step 3: Check the Data Types**\nEnsure that the target variable is numeric (e.g., `int` or `float`). If it is an object or string type, convert it to integers:\n\n```python\ny2_train_transform = y2_train_transform.astype(int)\ny2_test_transform = y2_test_transform.astype(int)\n```\n\n---\n\n### **Step 4: Verify Input Features**\nEnsure that `X_train_transform` and `X_test_transform` are numeric arrays with no missing values. Check their shape and data types:\n\n```python\nprint(\"Shape of X_train_transform:\", X_train_transform.shape)\nprint(\"Shape of y2_train_transform:\", y2_train_transform.shape)\nprint(\"Missing values in X_train_transform:\", np.isnan(X_train_transform).sum())\nprint(\"Missing values in y2_train_transform:\", np.isnan(y2_train_transform).sum())\n```\n\nIf there are missing values, handle them appropriately (e.g., imputation).\n\n---\n\n### **Step 5: Update Training Code**\nOnce the target variable is properly processed, use the following code to train the binary classification model:\n\n```python\nimport xgboost as xgb\nimport numpy as np\n\n# Convert input data to DMatrix\nxg_train = xgb.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgb.DMatrix(X_test_transform, label=y2_test_transform)\n\n# Set parameters\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # Should now be in (0, 1)\n    \"eval_metric\": \"logloss\"\n}\n\n# Train the model\nmodel = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n```\n\n---\n\n### **Step 6: Verify the Fix**\nIf the error persists, recheck:\n1. **Target Variable**:\n   Ensure `y2_train_transform` and `y2_test_transform` only contain `0` and `1`.\n\n   ```python\n   print(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\n   print(\"Unique values in y2_test_transform:\", np.unique(y2_test_transform))\n   ```\n\n2. **Input Features**:\n   Ensure `X_train_transform` and `X_test_transform` are numeric arrays with no missing values.\n\n---\n\n### **Why This Happens**\nThe error occurs because the `binary:logistic` objective in XGBoost expects the target variable to be binary (`0` or `1`). If the target contains other values, XGBoost raises an error during training.\n\nLet me know if you need further assistance!","metadata":{}},{"cell_type":"code","source":"print(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:36:51.616643Z","iopub.execute_input":"2025-03-18T18:36:51.617014Z","iopub.status.idle":"2025-03-18T18:36:51.624624Z","shell.execute_reply.started":"2025-03-18T18:36:51.616988Z","shell.execute_reply":"2025-03-18T18:36:51.623332Z"}},"outputs":[{"name":"stdout","text":"Unique values in y2_train_transform: [0 1]\n","output_type":"stream"}],"execution_count":131},{"cell_type":"code","source":"y2_train_transform = (y2_train_transform > 0).astype(int)\ny2_test_transform = (y2_test_transform > 0).astype(int)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:37:03.186296Z","iopub.execute_input":"2025-03-18T18:37:03.186655Z","iopub.status.idle":"2025-03-18T18:37:03.191615Z","shell.execute_reply.started":"2025-03-18T18:37:03.186626Z","shell.execute_reply":"2025-03-18T18:37:03.190449Z"}},"outputs":[],"execution_count":133},{"cell_type":"code","source":"print(\"Unique values in y2_train_transform after mapping:\", np.unique(y2_train_transform))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:37:11.779992Z","iopub.execute_input":"2025-03-18T18:37:11.780394Z","iopub.status.idle":"2025-03-18T18:37:11.787658Z","shell.execute_reply.started":"2025-03-18T18:37:11.780358Z","shell.execute_reply":"2025-03-18T18:37:11.786153Z"}},"outputs":[{"name":"stdout","text":"Unique values in y2_train_transform after mapping: [0 1]\n","output_type":"stream"}],"execution_count":134},{"cell_type":"code","source":"y2_train_transform = y2_train_transform.astype(int)\ny2_test_transform = y2_test_transform.astype(int)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:37:25.541567Z","iopub.execute_input":"2025-03-18T18:37:25.541905Z","iopub.status.idle":"2025-03-18T18:37:25.547343Z","shell.execute_reply.started":"2025-03-18T18:37:25.541879Z","shell.execute_reply":"2025-03-18T18:37:25.546046Z"}},"outputs":[],"execution_count":136},{"cell_type":"code","source":"print(\"Shape of X_train_transform:\", X_train_transform.shape)\nprint(\"Shape of y2_train_transform:\", y2_train_transform.shape)\nprint(\"Missing values in X_train_transform:\", np.isnan(X_train_transform).sum())\nprint(\"Missing values in y2_train_transform:\", np.isnan(y2_train_transform).sum())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:37:35.415159Z","iopub.execute_input":"2025-03-18T18:37:35.415525Z","iopub.status.idle":"2025-03-18T18:37:35.424079Z","shell.execute_reply.started":"2025-03-18T18:37:35.415499Z","shell.execute_reply":"2025-03-18T18:37:35.423043Z"}},"outputs":[{"name":"stdout","text":"Shape of X_train_transform: (2063, 47)\nShape of y2_train_transform: (2063,)\nMissing values in X_train_transform: 0\nMissing values in y2_train_transform: 0\n","output_type":"stream"}],"execution_count":137},{"cell_type":"code","source":"import xgboost as xgb\nimport numpy as np\n\n# Convert input data to DMatrix\nxg_train = xgb.DMatrix(X_train_transform, label=y2_train_transform)\nxg_test = xgb.DMatrix(X_test_transform, label=y2_test_transform)\n\n# Set parameters\nparams = {\n    \"eta\": 0.01,\n    \"objective\": \"binary:logistic\",\n    \"subsample\": 0.5,\n    \"base_score\": np.mean(y2_train_transform),  # Should now be in (0, 1)\n    \"eval_metric\": \"logloss\"\n}\n\n# Train the model\nmodel = xgb.train(params, xg_train, 5000, evals=[(xg_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:37:46.815495Z","iopub.execute_input":"2025-03-18T18:37:46.815860Z","iopub.status.idle":"2025-03-18T18:37:47.364146Z","shell.execute_reply.started":"2025-03-18T18:37:46.815833Z","shell.execute_reply":"2025-03-18T18:37:47.362927Z"}},"outputs":[{"name":"stdout","text":"[0]\ttest-logloss:0.17668\n[100]\ttest-logloss:0.04091\n[200]\ttest-logloss:0.01697\n[300]\ttest-logloss:0.00890\n[400]\ttest-logloss:0.00561\n[500]\ttest-logloss:0.00409\n[600]\ttest-logloss:0.00355\n[668]\ttest-logloss:0.00355\n","output_type":"stream"}],"execution_count":138},{"cell_type":"code","source":"print(\"Unique values in y2_train_transform:\", np.unique(y2_train_transform))\nprint(\"Unique values in y2_test_transform:\", np.unique(y2_test_transform))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:38:00.907726Z","iopub.execute_input":"2025-03-18T18:38:00.908101Z","iopub.status.idle":"2025-03-18T18:38:00.916100Z","shell.execute_reply.started":"2025-03-18T18:38:00.908073Z","shell.execute_reply":"2025-03-18T18:38:00.914968Z"}},"outputs":[{"name":"stdout","text":"Unique values in y2_train_transform: [0 1]\nUnique values in y2_test_transform: [0 1]\n","output_type":"stream"}],"execution_count":139},{"cell_type":"code","source":"# LIME Analysis\n# LIME expects NumPy arrays, and the predict function must return probabilities for both classes.\n# Update the predict_fn to return probabilities for both classes\npredict_fn = lambda x: np.hstack((1 - model.predict(xgb.DMatrix(x, feature_names=X_train.columns.tolist())).reshape(-1, 1),\n                                  model.predict(xgb.DMatrix(x, feature_names=X_train.columns.tolist())).reshape(-1, 1)))\n\n# Create the LIME explainer\nexplainer = lime.lime_tabular.LimeTabularExplainer(\n    X_train.values,  # Convert DataFrame to NumPy array\n    feature_names=X_train.columns.tolist(),  # Use the correct feature names\n    class_names=['Class 0', 'Class 1'],  # Update class names as needed\n    kernel_width=3\n)\n\n# Explain a single instance\n# Check the size of X_test\nprint(f\"Number of rows in X_test: {X_test.shape[0]}\")\n\n# Select a valid index\nnp.random.seed(1)\ni = np.random.randint(0, X_test.shape[0])  # Random valid index\nprint(f\"Selected index for explanation: {i}\")\n\n# Explain the instance\nexp = explainer.explain_instance(X_test.iloc[i].values, predict_fn, num_features=10)\nexp.save_to_file('lime_explanation_instance.html')\nprint(\"LIME explanation saved as 'lime_explanation_instance.html'\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T18:57:44.748444Z","iopub.execute_input":"2025-03-18T18:57:44.748834Z","iopub.status.idle":"2025-03-18T18:57:45.094451Z","shell.execute_reply.started":"2025-03-18T18:57:44.748805Z","shell.execute_reply":"2025-03-18T18:57:45.093190Z"}},"outputs":[{"name":"stdout","text":"Number of rows in X_test: 516\nSelected index for explanation: 37\nLIME explanation saved as 'lime_explanation_instance.html'\n","output_type":"stream"}],"execution_count":151},{"cell_type":"markdown","source":"The output you’re seeing indicates that the LIME explanation was successfully generated and saved as an HTML file (`lime_explanation_instance.html`). However, you might be expecting additional outputs like the classification report, accuracy, or log loss values that were part of your earlier output.\n\nLet’s address this step by step:\n\n---\n\n### **Reason for Missing Outputs**\n1. **LIME Explanation:**\n   - The LIME explanation process is separate from the model evaluation (accuracy, classification report, etc.). It focuses on explaining a single instance, not the overall model performance.\n\n2. **Model Evaluation Outputs:**\n   - If you want to include outputs like accuracy, classification reports, or log loss values, you need to explicitly calculate and print them in your script before or after the LIME explanation.\n\n---\n\n### **How to Include Other Outputs**\nYou can add the following code snippets to your script to regenerate the missing outputs:\n\n---\n\n#### **1. Model Accuracy**\n```python\nfrom sklearn.metrics import accuracy_score\n\n# Predict labels for X_test\ny_pred = model.predict(xgb.DMatrix(X_test, feature_names=X_train.columns.tolist()))\ny_pred_labels = (y_pred > 0.5).astype(int)  # Convert probabilities to binary labels\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred_labels)\nprint(f\"MLP Accuracy: {accuracy}\")\n```\n\n---\n\n#### **2. Classification Report**\n```python\nfrom sklearn.metrics import classification_report\n\n# Generate classification report\nprint(\"MLP Classification Report:\")\nprint(classification_report(y_test, y_pred_labels, target_names=['Class 0', 'Class 1']))\n```\n\n---\n\n#### **3. Log Loss During Training**\nIf you want to include the log loss values during training (as in the previous output), make sure you enable logging when training the XGBoost model. For example:\n\n```python\n# Train model with evaluation metrics logged\neval_set = [(xgb.DMatrix(X_test, feature_names=X_train.columns.tolist()), 'test')]\nmodel = xgb.train(params, dtrain, num_boost_round=2000, evals=eval_set, early_stopping_rounds=100)\n```\n\nThis will automatically print the log loss values during training.\n\n---\n\n#### **4. Displaying Selected Index for LIME**\n```python\n# Display the selected index for explanation\nprint(f\"Selected index for explanation: {i}\")\n```\n\n---\n\n### **Updated Code with All Outputs**\nHere’s the full script with all the outputs included:\n\n```python\nfrom sklearn.metrics import accuracy_score, classification_report\nimport numpy as np\nimport lime.lime_tabular\n\n# Predict labels for X_test\ny_pred = model.predict(xgb.DMatrix(X_test, feature_names=X_train.columns.tolist()))\ny_pred_labels = (y_pred > 0.5).astype(int)  # Convert probabilities to binary labels\n\n# Calculate and display accuracy\naccuracy = accuracy_score(y_test, y_pred_labels)\nprint(f\"MLP Accuracy: {accuracy}\")\n\n# Generate and display classification report\nprint(\"MLP Classification Report:\")\nprint(classification_report(y_test, y_pred_labels, target_names=['Class 0', 'Class 1']))\n\n# LIME Analysis\n# LIME expects NumPy arrays, and the predict function must return probabilities for both classes.\npredict_fn = lambda x: np.hstack((1 - model.predict(xgb.DMatrix(x, feature_names=X_train.columns.tolist())).reshape(-1, 1),\n                                  model.predict(xgb.DMatrix(x, feature_names=X_train.columns.tolist())).reshape(-1, 1)))\n\n# Create the LIME explainer\nexplainer = lime.lime_tabular.LimeTabularExplainer(\n    X_train.values,  # Convert DataFrame to NumPy array\n    feature_names=X_train.columns.tolist(),  # Use the correct feature names\n    class_names=['Class 0', 'Class 1'],  # Update class names as needed\n    kernel_width=3\n)\n\n# Check the size of X_test\nprint(f\"Number of rows in X_test: {X_test.shape[0]}\")\n\n# Select a valid index for explanation\nnp.random.seed(1)\ni = np.random.randint(0, X_test.shape[0])  # Random valid index\nprint(f\"Selected index for explanation: {i}\")\n\n# Explain the instance\nexp = explainer.explain_instance(X_test.iloc[i].values, predict_fn, num_features=10)\nexp.save_to_file('lime_explanation_instance.html')\nprint(\"LIME explanation saved as 'lime_explanation_instance.html'\")\n```\n\n---\n\n### **Expected Outputs**\n1. **Accuracy**:\n   - Example:\n     ```\n     MLP Accuracy: 0.8701550387596899\n     ```\n\n2. **Classification Report**:\n   - Example:\n     ```\n     MLP Classification Report:\n                    precision    recall  f1-score   support\n\n                0       0.79      0.77      0.78       155\n                1       0.90      0.91      0.91       361\n\n         accuracy                           0.87       516\n        macro avg       0.85      0.84      0.84       516\n     weighted avg       0.87      0.87      0.87       516\n     ```\n\n3. **Log Loss During Training**:\n   - Example:\n     ```\n     [0]\ttest-logloss:0.60299\n     [100]\ttest-logloss:0.19079\n     ...\n     [2000]\ttest-logloss:0.00258\n     ```\n\n4. **LIME Explanation**:\n   - `lime_explanation_instance.html` is saved to the current directory.\n\n---\n\nLet me know if this resolves your issue or if you need further assistance!","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, classification_report\nimport numpy as np\nimport lime.lime_tabular\n\n# Predict labels for X_test\ny_pred = model.predict(xgb.DMatrix(X_test, feature_names=X_train.columns.tolist()))\ny_pred_labels = (y_pred > 0.5).astype(int)  # Convert probabilities to binary labels\n\n# Calculate and display accuracy\naccuracy = accuracy_score(y_test, y_pred_labels)\nprint(f\"MLP Accuracy: {accuracy}\")\n\n# Generate and display classification report\nprint(\"MLP Classification Report:\")\nprint(classification_report(y_test, y_pred_labels, target_names=['Class 0', 'Class 1']))\n\n# LIME Analysis\n# LIME expects NumPy arrays, and the predict function must return probabilities for both classes.\npredict_fn = lambda x: np.hstack((1 - model.predict(xgb.DMatrix(x, feature_names=X_train.columns.tolist())).reshape(-1, 1),\n                                  model.predict(xgb.DMatrix(x, feature_names=X_train.columns.tolist())).reshape(-1, 1)))\n\n# Create the LIME explainer\nexplainer = lime.lime_tabular.LimeTabularExplainer(\n    X_train.values,  # Convert DataFrame to NumPy array\n    feature_names=X_train.columns.tolist(),  # Use the correct feature names\n    class_names=['Class 0', 'Class 1'],  # Update class names as needed\n    kernel_width=3\n)\n\n# Check the size of X_test\nprint(f\"Number of rows in X_test: {X_test.shape[0]}\")\n\n# Select a valid index for explanation\nnp.random.seed(1)\ni = np.random.randint(0, X_test.shape[0])  # Random valid index\nprint(f\"Selected index for explanation: {i}\")\n\n# Explain the instance\nexp = explainer.explain_instance(X_test.iloc[i].values, predict_fn, num_features=10)\nexp.save_to_file('lime_explanation_instance.html')\nprint(\"LIME explanation saved as 'lime_explanation_instance.html'\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T19:01:06.837913Z","iopub.execute_input":"2025-03-18T19:01:06.838311Z","iopub.status.idle":"2025-03-18T19:01:07.112097Z","shell.execute_reply.started":"2025-03-18T19:01:06.838284Z","shell.execute_reply":"2025-03-18T19:01:07.110799Z"}},"outputs":[{"name":"stdout","text":"MLP Accuracy: 1.0\nMLP Classification Report:\n              precision    recall  f1-score   support\n\n     Class 0       1.00      1.00      1.00       155\n     Class 1       1.00      1.00      1.00       361\n\n    accuracy                           1.00       516\n   macro avg       1.00      1.00      1.00       516\nweighted avg       1.00      1.00      1.00       516\n\nNumber of rows in X_test: 516\nSelected index for explanation: 37\nLIME explanation saved as 'lime_explanation_instance.html'\n","output_type":"stream"}],"execution_count":152},{"cell_type":"markdown","source":"The output indicates that your model is achieving **perfect accuracy** on the test set, with all metrics (precision, recall, and F1-score) equal to 1.0 for both classes. While this may seem ideal, it’s important to critically evaluate whether this result is realistic or if it might indicate potential issues such as **data leakage** or an overly simplistic dataset.\n\n---\n\n### **What Does This Output Mean?**\n1. **Perfect Accuracy (`MLP Accuracy: 1.0`)**:\n   - Your model is correctly predicting every instance in the test set.\n\n2. **Classification Report**:\n   - Both classes (Class 0 and Class 1) are perfectly classified, with precision, recall, and F1-score all equal to 1.0.\n   - The support column confirms the class distribution in the test set: 155 instances of Class 0 and 361 instances of Class 1.\n\n3. **LIME Explanation**:\n   - The LIME explanation for the selected instance (`index 37`) has been saved as an HTML file (`lime_explanation_instance.html`). You can open this file in a browser to see the detailed explanation of the model's decision for that specific instance.\n\n---\n\n### **Should You Be Concerned About Perfect Accuracy?**\nWhile perfect accuracy is theoretically possible, it’s rare in real-world scenarios. Here are some reasons why you might achieve perfect accuracy and steps to verify the validity of your results:\n\n#### **1. Data Leakage**\n   - **What It Is**: Data leakage occurs when information from the target variable (or related features) inadvertently influences the training process, leading to overly optimistic results.\n   - **How to Check**:\n     - Review your data preprocessing pipeline to ensure no information from the test set was used during training.\n     - Verify that features derived from the target variable are not included in the training data.\n\n#### **2. Overfitting**\n   - **What It Is**: Overfitting happens when the model memorizes the training data instead of generalizing, resulting in perfect performance on the test set if it is too similar to the training set.\n   - **How to Check**:\n     - Evaluate the model on a completely separate validation set or through cross-validation.\n     - Compare training and test performance. If training accuracy is also 1.0, overfitting is likely.\n\n#### **3. Simplistic Dataset**\n   - **What It Is**: If the dataset is small, has a simple structure, or contains very distinguishable features, the model might achieve perfect accuracy.\n   - **How to Check**:\n     - Inspect the dataset for redundancy or overly simplistic patterns.\n     - Perform feature importance analysis to see if only a few features dominate the predictions.\n\n#### **4. Random Seed Effects**\n   - **What It Is**: A specific random seed might result in a train-test split where the test set is unusually easy for the model to predict.\n   - **How to Check**:\n     - Change the random seed for the train-test split and observe whether the accuracy remains perfect.\n\n---\n\n### **Next Steps**\nHere’s what you can do to verify your results and ensure the model is robust:\n\n#### **1. Perform Cross-Validation**\n   ```python\n   from sklearn.model_selection import cross_val_score\n\n   # Perform 5-fold cross-validation\n   cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')\n   print(f\"Cross-validation scores: {cv_scores}\")\n   print(f\"Mean CV accuracy: {cv_scores.mean()}\")\n   ```\n\n#### **2. Shuffle and Re-Split the Data**\n   ```python\n   from sklearn.model_selection import train_test_split\n\n   # Shuffle and re-split the data\n   X_train_new, X_test_new, y_train_new, y_test_new = train_test_split(\n       X, y, test_size=0.2, random_state=42, shuffle=True\n   )\n\n   # Retrain the model on the new split\n   model.fit(X_train_new, y_train_new)\n   y_pred_new = model.predict(X_test_new)\n\n   # Evaluate the new split\n   print(\"Accuracy on new split:\", accuracy_score(y_test_new, y_pred_new))\n   ```\n\n#### **3. Inspect Feature Importance**\n   ```python\n   # Get feature importance from the XGBoost model\n   feature_importance = model.get_score(importance_type='weight')\n   print(\"Feature importance:\", feature_importance)\n   ```\n\n#### **4. Review the LIME Explanation**\n   - Open the `lime_explanation_instance.html` file in your browser to understand why the model made its prediction for the selected instance. Look for any signs of over-reliance on specific features.\n\n---\n\n### **Final Thoughts**\nIf the perfect accuracy persists after these checks, it could mean your dataset is inherently simple or that the model is well-suited for the task. However, if you identify issues such as data leakage or overfitting, you’ll need to address them to ensure the model is reliable in real-world applications.\n\nLet me know if you’d like help investigating any of these aspects further!","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\n\n# Perform 5-fold cross-validation\ncv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')\nprint(f\"Cross-validation scores: {cv_scores}\")\nprint(f\"Mean CV accuracy: {cv_scores.mean()}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T19:02:48.909547Z","iopub.execute_input":"2025-03-18T19:02:48.909935Z","iopub.status.idle":"2025-03-18T19:02:48.933819Z","shell.execute_reply.started":"2025-03-18T19:02:48.909909Z","shell.execute_reply":"2025-03-18T19:02:48.932567Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-153-ed116ab54637>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Perform 5-fold cross-validation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mcv_scores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Cross-validation scores: {cv_scores}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Mean CV accuracy: {cv_scores.mean()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    511\u001b[0m     \"\"\"\n\u001b[1;32m    512\u001b[0m     \u001b[0;31m# To ensure multimetric format is not supported\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 513\u001b[0;31m     \u001b[0mscorer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_scoring\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscoring\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    514\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    515\u001b[0m     cv_results = cross_validate(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_scorer.py\u001b[0m in \u001b[0;36mcheck_scoring\u001b[0;34m(estimator, scoring, allow_none)\u001b[0m\n\u001b[1;32m    472\u001b[0m     \"\"\"\n\u001b[1;32m    473\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"fit\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 474\u001b[0;31m         raise TypeError(\n\u001b[0m\u001b[1;32m    475\u001b[0m             \u001b[0;34m\"estimator should be an estimator implementing 'fit' method, %r was passed\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    476\u001b[0m             \u001b[0;34m%\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: estimator should be an estimator implementing 'fit' method, <xgboost.core.Booster object at 0x7e4664de3f70> was passed"],"ename":"TypeError","evalue":"estimator should be an estimator implementing 'fit' method, <xgboost.core.Booster object at 0x7e4664de3f70> was passed","output_type":"error"}],"execution_count":153},{"cell_type":"code","source":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\n\n# Create and configure the XGBClassifier\nxgb_model = XGBClassifier(\n    n_estimators=2000,\n    learning_rate=0.01,\n    max_depth=6,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    random_state=42\n)\n\n# Perform 5-fold cross-validation\ncv_scores = cross_val_score(xgb_model, X_train, y_train, cv=5, scoring='accuracy')\nprint(f\"Cross-validation scores: {cv_scores}\")\nprint(f\"Mean CV accuracy: {cv_scores.mean()}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T19:03:51.376429Z","iopub.execute_input":"2025-03-18T19:03:51.376805Z","iopub.status.idle":"2025-03-18T19:03:57.478717Z","shell.execute_reply.started":"2025-03-18T19:03:51.376772Z","shell.execute_reply":"2025-03-18T19:03:57.477302Z"}},"outputs":[{"name":"stdout","text":"Cross-validation scores: [1. 1. 1. 1. 1.]\nMean CV accuracy: 1.0\n","output_type":"stream"}],"execution_count":154},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Shuffle and re-split the data\nX_train_new, X_test_new, y_train_new, y_test_new = train_test_split(\n    X, y, test_size=0.2, random_state=42, shuffle=True\n)\n\n# Convert data to DMatrix format\ndtrain = xgb.DMatrix(X_train_new, label=y_train_new)\ndtest = xgb.DMatrix(X_test_new, label=y_test_new)\n\n# Train the Booster model\nparams = {\n    'objective': 'binary:logistic',  # Use appropriate objective for your task\n    'learning_rate': 0.01,\n    'max_depth': 6,\n    'subsample': 0.8,\n    'colsample_bytree': 0.8,\n    'seed': 42\n}\nnum_round = 2000\nmodel = xgb.train(params, dtrain, num_round)\n\n# Make predictions\ny_pred_new = model.predict(dtest)\ny_pred_new = [1 if pred > 0.5 else 0 for pred in y_pred_new]  # Convert probabilities to binary predictions\n\n# Evaluate the new split\nprint(\"Accuracy on new split:\", accuracy_score(y_test_new, y_pred_new))\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T19:06:47.573070Z","iopub.execute_input":"2025-03-18T19:06:47.573520Z","iopub.status.idle":"2025-03-18T19:06:49.008904Z","shell.execute_reply.started":"2025-03-18T19:06:47.573485Z","shell.execute_reply":"2025-03-18T19:06:49.007846Z"}},"outputs":[{"name":"stdout","text":"Accuracy on new split: 1.0\n","output_type":"stream"}],"execution_count":156}]}